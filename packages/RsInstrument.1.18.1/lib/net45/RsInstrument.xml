<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RsInstrument</name>
    </assembly>
    <members>
        <member name="T:RohdeSchwarz.RsInstrument.Conversions.Conversions">
            <summary>
            Conversion utilities for double, integer and boolean
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.Conversions.Conversions.ToDouble(System.String)">
            <summary>
            Converts string to Double value. Also recognizes special values, like "NAN", "+Inf", "-Inf"...
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.Conversions.Conversions.ToDouble(System.String,System.Double)">
            <summary>
            Converts string to Double value. Also recognizes special values, like "NAN", "+Inf", "-Inf"...
            Any parsing exception is suppressed and in that case the method returns that defValue
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.Conversions.Conversions.ToInteger(System.String)">
            <summary>
            Converts string to Integer32 value. Also recognizes special values, like "NAN", "+Inf", "-Inf"...
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.Conversions.Conversions.ToLong(System.String,System.Int32)">
            <summary>
            Converts string to Integer64 value. Also recognizes special values, like "NAN", "+Inf", "-Inf"...
            Any parsing exception is suppressed and in that case the method returns that defValue
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.Conversions.Conversions.ToLong(System.String)">
            <summary>
            Converts string to Integer64 value. Also recognizes special values, like "NAN", "+Inf", "-Inf"...
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.Conversions.Conversions.ToInteger(System.String,System.Int32)">
            <summary>
            Converts string to Integer32 value. Also recognizes special values, like "NAN", "+Inf", "-Inf"...
            Any parsing exception is suppressed and in that case the method returns that defValue
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.Conversions.Conversions.ToBoolean(System.String)">
            <summary>
            Converts string to Boolean value.
            Recognises all the standard SCPI representations of boolean values.
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.BinaryGroup">
            <summary>
            All the binary data I/O members
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.BinaryGroup.FloatNumbersFormat">
            <summary>
            Defines the coding of instrument's floating-point numbers in binary data
            Swapped means the endianness of the instrument is different from endianness of the Control PC
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.BinaryGroup.IntegerNumbersFormat">
            <summary>
            Defines the coding of instrument's integer numbers in binary data
            Swapped means the endianness of the instrument is different from endianness of the Control PC
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.WriteData(System.String,System.Byte[])">
            <summary>
            Writes all the data as binary data to the instrument
            It sends the entered command, followed by the constructed binary data header and the binaryData
            <para>Exceptions: VisaException, VisaTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.WriteData(System.String,System.IO.Stream)">
            <summary>
            Writes all the data as binary data to the instrument
            It sends the entered command, followed by the constructed binary data header and the binary data from the stream
            <para>Exceptions: VisaException, VisaTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.QueryData(System.String,System.IO.Stream)">
            <summary>
            Queries binary data and returns it in the entered Stream
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.QueryData(System.String)">
            <summary>
            Queries binary data and returns it as byte array
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.QueryDataWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization.
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.QueryDataWithOpc(System.String,System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization and writes it to the provided stream.
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.QueryBinOrAsciiFloatArray(System.String)">
            <summary>
            Queries an array of floating-point numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal double array.
            <para>Exceptions: VisaException, VisaTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.QueryBinOrAsciiFloatArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of floating-point numbers with OPC sync.
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format. The array is always returned as the most-universal double array.
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.QueryBinOrAsciiSingleFloatArray(System.String)">
            <summary>
            Queries an array of single floating-point numbers that can be returned in ASCII format or in binary format.
            The array is always returned as single float array.
            If the BinaryFloatNumbersFormat is Double8Bytes or Double8BytesSwapped, the method throws an exception.
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.QueryBinOrAsciiSingleFloatArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of single floating-point numbers with OPC sync.
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format. The array is always returned as single float array.
            If the BinaryFloatNumbersFormat is Double8Bytes or Double8BytesSwapped, the method throws an exception.
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.QueryBinOrAsciiIntegerArray(System.String)">
            <summary>
            Queries an array of integer numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BinaryGroup.QueryBinOrAsciiIntergerArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of integer numbers with OPC synchronization. If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            The numbers can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.EventsGroup">
            <summary>
            All the event-related members
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.EventsGroup.ReadSegmentHandler">
            <summary>
            Handler invoked when you read big data from the instrument.
            After each segment with the maximum size of RsInstrument.IoSegmentSize the driver generates this event
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.EventsGroup.WriteSegmentHandler">
            <summary>
            Handler invoked when you write big data to the instrument.
            After each segment with the maximum size of RsInstrument.IoSegmentSize the driver generates this event
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.EventsGroup.WriteWithOpcHandler">
            <summary>
            Handler for the write with OPC events
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.EventsGroup.QueryWithOpcHandler">
            <summary>
            Handler for the query with OPC events
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.EventsGroup.InstrumentErrorHandler">
            <summary>
            Handler invoked when the instrument generates an error
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.EventsGroup.InstrumentOperationRegisterHandler">
            <summary>
            Handler invoked when the operation status register generates an event
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.EventsGroup.InstrumentQuestionableRegisterHandler">
            <summary>
            Handler invoked when the questionable status register generates an event
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.EventsGroup.WriteStringWithOpc(System.String)">
            <summary>
            Writes with opc event. Register the event with WriteWitOpcHandler
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.EventsGroup.QueryStringWithOpc(System.String)">
            <summary>
            Queries the instrument and invokes the QueryWithOpcHandler when the operation has completed
            The response is available in the InstrEventArgs.Data
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.EventsGroup.QueryBinaryDataWithOpc(System.String)">
            <summary>
            Queries the instrument for binary data and invokes the QueryWithOpcHandler when the operation has completed
            The response is available in the InstrEventArgs.Data
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.EventsGroup.QueryBinaryOrAsciiFloatArrayWithOpc(System.String)">
            <summary>
            Queries an array of floating-point numbers with OPC sync.
            After the response arrives, the method invokes the QueryWithOpcHandler.
            The response is available in the InstrEventArgs.Data as double[] array
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            The numbers can be returned in ASCII format or in binary format.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.EventsGroup.QueryBinaryOrAsciiSingleFloatArrayWithOpc(System.String)">
            <summary>
            Queries an array of single floating-point numbers with OPC sync.
            After the response arrives, the method invokes the QueryWithOpcHandler.
            The response is available in the InstrEventArgs.Data as float[] array
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            The numbers can be returned in ASCII format or in binary format.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.EventsGroup.QueryBinaryOrAsciiIntgerArrayWithOpc(System.String)">
            <summary>
            Queries an array of int32 numbers with OPC sync.
            After the response arrives, the method invokes the QueryWithOpcHandler.
            The response is available in the InstrEventArgs.Data as int[] array
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            The numbers can be returned in ASCII format or in binary format.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.FileGroup">
            <summary>
            All the file-transfer related members
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.FileGroup.FromStreamToInstrument(System.IO.Stream,System.String)">
            <summary>
            SCPI Command: MMEM:DATA
            Sends file from the provided stream to the Instrument
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.FileGroup.FromPcToInstrument(System.String,System.String)">
            <summary>
            SCPI Command: MMEM:DATA
            Sends file from PC to the Instrument
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.FileGroup.FromInstrumentToStream(System.String,System.IO.Stream)">
            <summary>
            SCPI Command: MMEM:DATA?
            Reads file from Instrument to the provided stream
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.FileGroup.FromInstrumentToPc(System.String,System.String,System.Boolean)">
            <summary>
            SCPI Command: MMEM:DATA?
            Reads file from Instrument to the PC
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.IdnGroup">
            <summary>
            All the driver and instrument identification members
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.DriverVersion">
            <summary>
            Returns the current instrument driver version
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.CoreVersion">
            <summary>
            Returns the current instrument core engine version
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.IdnString">
            <summary>
            SCPI Command: *IDN?
            Returns instrument's Identification string
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.Manufacturer">
            <summary>
            Returns manufacturer of the instrument
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.InstrumentFullName">
            <summary>
            Return the current instrument's full name e.g. FSW26
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.InstrumentName">
            <summary>
            Return the current instrument's family name e.g. FSW
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.ResourceName">
            <summary>
            Return the instrument resource name used to initialize the instrument session
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.SupportedModels">
            <summary>
            Returns a list of the instrument models supported by this instrument driver
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.InstrumentFirmwareVersion">
            <summary>
            Returns instrument's firmware revision
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.InstrumentSerialNumber">
            <summary>
            Returns instrument's serial number
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.InstrumentOptions">
            <summary>
            Returns all the instrument options.
            The options are sorted in the ascending order starting with K-options and continuing with B-options
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.VisaManufacturer">
            <summary>
            Returns the manufacturer of the current VISA session
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.IdnGroup.VisaDllName">
            <summary>
            Returns used Visa DLL name including bittness
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.LoggingGroup">
            <summary>
            All the logging members
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.LoggingGroup.Logging">
            <summary>
            Switches driver's logging status
            Use the AddStreamLogger or RemoveStreamLogger to attach or remove logging streams
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.LoggingGroup.AddStreamLogger(System.IO.Stream)">
            <summary>
            Adds the stream for logging
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.LoggingGroup.RemoveStreamLogger(System.IO.Stream)">
            <summary>
            Removes the logging stream
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.LoggingGroup.WriteStringToLog(System.String)">
            <summary>
            Writes a custom message to log
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.ReliabilityEventArgs">
            <summary>
            Arguments for Reliability event
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.ReliabilityEventArgs.Code">
            <summary>
            Reliability code
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.ReliabilityEventArgs.Message">
            <summary>
            Reliability code transferred to human-readable text
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.ReliabilityEventArgs.Context">
            <summary>
            Context of the last update occurence, usually the sent SCPI query
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.ReliabilityEventArgs.Timestamp">
            <summary>
            Time of the last update
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.ReliabilityEventArgs.#ctor(System.DateTime,System.Int32,System.String,System.String)">
            <summary>
            Arguments for reliability event
            </summary>
            <param name="timeStamp"></param>
            <param name="code">Reliability code</param>
            <param name="message">Reliability code transferred to human-readable text</param>
            <param name="context">Context of the update</param>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.RsInstrument_Reliability">
            <summary>
            Reliability class that handles all the necessary tasks related to reliability indicator
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument_Reliability.LastValue">
            <summary>
            Returns the last updated Reliability code
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument_Reliability.LastMessage">
            <summary>
            Returns the LastValue of the reliability table converted to human-readable string
            If the LastValue code is not defined, the Property returns "&lt;UNKNOWN&gt;"
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument_Reliability.LastContext">
            <summary>
            Returns the last updated Context of the reliability code - usually the SCPI query on which the instrument responded with the Reliability code
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument_Reliability.LastTimestamp">
            <summary>
            Returns the time of the last Reliability update
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument_Reliability.ExceptionOnError">
            <summary>
            If true, (default is false) the object throws an exception if the updated reliability is not 0 (non-OK)
            </summary>
        </member>
        <member name="E:RohdeSchwarz.RsInstrument.RsInstrument_Reliability.Updated">
            <summary>
            Register your callback to get informed about each update
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument_Reliability.OnUpdate(RohdeSchwarz.RsInstrument.ReliabilityEventArgs)">
            <summary>
            Prototype for the event handler
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument_Reliability.ReliabilityTable">
            <summary>
            Contains pairs of Reliability number and Human-readable message
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.RsInstrument">
            <summary>
            Communication public methods
            </summary>
            <summary>
            Base class of the RohdeSchwarz generic instrument driver.
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.Binary">
            <summary>
            All the binary data I/O members
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.Events">
            <summary>
            All the event-related members
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.File">
            <summary>
            All the file-transfer related members
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.Identification">
            <summary>
            All the driver and instrument identification members
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.Logging">
            <summary>
            All the logging members
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryOpc">
            <summary>
            SCPI Command: *OPC?
            Queries the instrument's OPC bit and hence it waits until the instrument reports operation complete.
            <para>Exceptions: VisaException, VisaTimeoutException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryOpc(System.Int32)">
            <summary>
            SCPI Command: *OPC?
            Queries the instrument's OPC bit and hence it waits until the instrument reports operation complete.
            You can define the visaTimeout which is set only for this call.
            <para>Exceptions: VisaException, VisaTimeoutException</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.InstrumentStatusChecking">
            <summary>
            Sets / Gets Instrument Status Checking.
            When true (default is true), all the driver methods and properties are sending "SYST:ERR?" at the end to immediately react on error that might have occurred.
            We recommend to keep the state checking ON all the time. Switch it OFF only in rare cases when you require maximum speed.
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.OpcQueryAfterEachSetting">
            <summary>
            Sets / Gets Instrument *OPC? query sending after each settings.
            When true, (default is false) the driver sends *OPC? every time a write command is performed.
            For queries, the *OPC? is skipped.
            Use this if you want to make sure your sequence is performed command-after-command.
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.ClearStatus">
            <summary>
            Clears instrument's status system, the session's I/O buffers and the instrument's error queue.
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryOldestError">
            <summary>
            SCPI command: SYSTem:ERRor?
            Queries and deletes the oldest error in the instrument's error queue.
            Returns the oldest error that occurred. If no error is present, the method returns {code=0, msg='No Error'}
            <para>Exceptions: VisaException, VisaTimeoutException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryAllErrors">
            <summary>
            SCPI command: SYSTem:ERRor?
            Queries and clears the errors from the instrument's error queue.
            The errors are ordered from the oldest ones to the newest one.
            The method calls the 'SYSTem:ERRor?' in a loop until the error queue is empty.
            <para>Exceptions: VisaException, VisaTimeoutException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.CheckStatus">
            <summary>
            Throws InstrumentStatusException in case of an error in the instrument's error queue.
            <para>Exceptions: VisaException, VisaTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.Reset">
            <summary>
            SCPI command: *RST
            Sends *RST command + calls the ClearStatus()
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.DefaultInstrumentSetup">
            <summary>
            Custom steps performed at the init and at the Reset()
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.SelfTest">
            <summary>
            SCPI command: *TST?
            Performs instrument's selftest and returns null if the selftest passed
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.SelfTest(System.Int32)">
            <summary>
            SCPI command: *TST?
            Performs instrument's selftest and returns null if the selftest passed
            You can define the custom timeout in milliseconds
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.OpcTimeout">
            <summary>
            Timeout in milliseconds for all the operations that use OPC synchronization
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.VisaTimeout">
            <summary>
            VISA session timeout in milliseconds
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.ProcessAllPreviousCommands">
            <summary>
            SCPI Command: *WAI
            Stops further commands processing until all commands sent before *WAI have been executed.
            <para>Exceptions: VisaException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.IoSegmentSize">
            <summary>
            Sets/Gets size of one transferred data segment
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryBool(System.String)">
            <summary>
            Sends the query to the instrument and returns the response as boolean
            <para>Exceptions: VisaException, VisaTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryBooleanList(System.String)">
            <summary>
            Sends the query to the instrument and returns the response as a boolean List.
            Boolean array is converted from the csv-response.
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryBooleanWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends the opc-synced query to the instrument and returns the response as boolean
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryBooleanListWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends the opc-synced query to the instrument and returns the response as a boolean List.
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryString(System.String)">
            <summary>
            Sends the query to the instrument and returns the response as string
            The response is trimmed of any trailing TermChars and has no length limit.
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.Query(System.String)">
            <summary>
            Alias to the method QueryString().
            Sends the query to the instrument and returns the response as string
            The response is trimmed of any trailing TermChars and has no length limit.
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryStringList(System.String)">
            <summary>
            Sends the query to the instrument and returns the response as string list of unlimited length.
            Each element is trimmed for paired quotes and trailing spaces.
            If the response is empty, the method returns 0-length List.
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryStringWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends the opc-synced query to the instrument and returns the response as string.
            The response is trimmed of any trailing TermChars and has no length limit.
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Alias to the method QueryStringWithOpc().
            Sends the opc-synced query to the instrument and returns the response as string.
            The response is trimmed of any trailing TermChars and has no length limit.
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryStringListWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends the opc-synced query to the instrument and returns the response as string list of unlimited length.
            Each element is trimmed for paired quotes and trailing spaces.
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used.
            If the response is empty, the method returns 0-length List.
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryDouble(System.String)">
            <summary>
            Sends the query to the instrument and returns the response as double
            <para>Exceptions: VisaException, VisaTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryDoubleWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends the opc-synced query to the instrument and returns the response as double
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryInteger(System.String)">
            <summary>
            Sends the query to the instrument and returns the response as integer
            <para>Exceptions: VisaException, VisaTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.QueryIntegerWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends the opc-synced query to the instrument and returns the response as integer
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            <para>Exceptions: VisaException, VisaTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.WriteString(System.String)">
            <summary>
            Writes command to the instrument
            <para>Exceptions: VisaException, VisaTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.Write(System.String)">
            <summary>
            Alias to the method WriteString().
            Writes command to the instrument
            <para>Exceptions: VisaException, VisaTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.WriteStringWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Writes command to the instrument and wait for it to be executed
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.WriteWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Alias to the method WriteStringWithOpc().
            Writes command to the instrument and wait for it to be executed
            If timeoutMs is null, -1 or 0, the current Opc Timeout is used
            <para>Exceptions: VisaException, VisaTimeoutException, OperationTimeoutException, InstrumentStatusException</para>
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.HasOptionInstalled(System.String)">
            <summary>
            Returns true, if the instrument has the entered option installed
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.AssignLock(System.Object)">
            <summary>
            Assigns new locking object. Use it to synchronise between multiple Instrument objects
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.GetLock">
            <summary>
            Returns locking object. Use it to synchronise between multiple Instrument objects
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.GoToLocal">
            <summary>
            Tell the instrument to go to local
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.GoToRemote">
            <summary>
            Tell the instrument to go to remote
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrument.Session">
            <summary>
            Session handle to give over to a constructor of another driver.
            Use that in case you want to reuse the existing VISA session to the instrument
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.#ctor(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Driver constructor with all parameters.
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            <para>Option String is comma-separated tokens. Examples:</para>
            <para>'Simulate = True' - starts the session in simulation mode. Default: false</para>
            <para>'SelectVisa = RsVisa | SocketIo | NativeVisa' - selects RsVisa or SocketIo (no Visa). Default: NativeVisa</para>
            <para>'QueryInstrumentStatus = false' - same as driver.InstrumentStatusChecking = false. Default: true</para>
            <para>'WriteDelay = 20, ReadDelay = 5' - Introduces delay of 20 ms before each write and 5 ms before each read. Default: 0 ms for both</para>
            <para>'OpcWaitMode = OpcQuery' - mode for all the opc-synchronised write/reads. Other modes: ServiceRequest, StbPolling, StbPollingSlow, StbPollingSuperSlow. Default: StbPolling</para>
            <para>'TermChar = '\n'' - Termination character for read and write. Default: '\n'</para>
            <para>'AddTermCharToWriteBinData = true' - Adds one additional TermChar to the end of the binary data (some instruments require that). Default: false</para>
            <para>'AssureWriteWithTc = true' - Makes sure each command/query is terminated with the TermChar. Default: Interface dependent</para>
            <para>'IoSegmentSize = 10E3' - Maximum size of one write/read segment. If transferred data is bigger, it is split to more segments. Default: 1E6 bytes</para>
            <para>'OpcTimeout = 10000' - same as driver.OpcTimeout = 10000. Default: 30000 ms</para>
            <para>'VisaTimeout = 5000' - same as driver.VisaTimeout = 5000. Default: 10000 ms</para>
            <para>'ViClearExeMode = 255' - Binary combination where 1 means performing viClear() on a certain interface as the very first command in init</para>
            <para>'OpcQueryAfterWrite = true' - same as driver.OpcQueryAfterEachSetting = true. Default: false</para>
            <para>'VxiCapable = false' - you can force a session to a VXI-incapable. Default: Interface dependent</para>
            <para>'StbInErrorCheck = false' - If false, the instrument uses SYST:ERR? in error check instead of *STB?. Default: true</para>
            <para>'DisableStbQuery = true' - If true, the instrument skips all the *STB? queries. Default: false</para>
            <para>'DisableOpcQuery = true' - If true, the instrument skips all the *OPC? queries. Default: false</para>
            <para>'SkipStatusSystemSettings = true' - If true, the *ESE and *SRE registers are not set and the OPC Wait Mode is set to OpcQuery. Default: false</para>
            </summary>
            <param name="resourceName">VISA resource to open the instrument</param>
            <param name="idQuery">Check Identification query and throw an exception if the instrument does not fit the supported instruments</param>
            <param name="resetDevice">Performs an instrument reset</param>
            <param name="optionString">Additional options, seee the constructor desription.</param>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.#ctor(System.String)">
            <summary>
            Opens a new session with the given 'resourceName'
            Checks the *IDN? response, but does not perform Reset
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
            <param name="resourceName">VISA resource to open the instrument</param>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.#ctor(System.String,System.String)">
            <summary>
            Driver constructor that checks the *IDN? response, but does not perform Reset.
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            <para>Option String is comma-separated tokens. Examples:</para>
            <para>'Simulate = True' - starts the session in simulation mode. Default: False</para>
            <para>'SelectVisa = RsVisa | SocketIo | NativeVisa' - selects RsVisa or SocketIo (no Visa). Default: NativeVisa</para>
            <para>'QueryInstrumentStatus = False' - same as driver.utilities.instrument_status_checking = False. Default: True</para>
            <para>'WriteDelay = 20, ReadDelay = 5' - Introduces delay of 20ms before each write and 5ms before each read. Default: 0ms for both</para>
            <para>'OpcWaitMode = OpcQuery' - mode for all the opc-synchronised write/reads. Other modes: ServiceRequest, StbPolling, StbPollingSlow, StbPollingSuperSlow. Default: StbPolling</para>
            <para>'TermChar = '\n'' - Termination character for read and write. Default: '\n'</para>
            <para>'AddTermCharToWriteBinData = True' - Adds one additional TermChar to the end of the binary data (some instruments require that). Default: False</para>
            <para>'AssureWriteWithTc = True' - Makes sure each command/query is terminated with the TermChar. Default: Interface dependent</para>
            <para>'IoSegmentSize = 10E3' - Maximum size of one write/read segment. If transferred data is bigger, it is split to more segments. Default: 1E6 bytes</para>
            <para>'OpcTimeout = 10000' - same as driver.utilities.opc_timeout = 10000. Default: 30000ms</para>
            <para>'VisaTimeout = 5000' - same as driver.utilities.visa_timeout = 5000. Default: 10000ms</para>
            <para>'ViClearExeMode = 255' - Binary combination where 1 means performing viClear() on a certain interface as the very first command in init</para>
            <para>'OpcQueryAfterWrite = True' - same as driver.utilities.opc_query_after_write = True. Default: False</para>
            <para>'VxiCapable = False' - you can force a session to a VXI-incapable. Default: Interface Dependent</para>
            <para>'StbInErrorCheck = false' - If false, the instrument uses SYST:ERR? in error check instead of *STB?. Default: true</para>
            <para>'DisableStbQuery = true' - If true, the instrument skips all the *STB? queries. Default: false</para>
            <para>'DisableOpcQuery = true' - If true, the instrument skips all the *OPC? queries. Default: false</para>
            </summary>
            <param name="resourceName">VISA resource to open the instrument</param>
            <param name="optionString">Additional options, seee the constructor desription.</param>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens a new session with the given 'resourceName' with the option to check the IDN string and reset the instrument
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
            <param name="resourceName">VISA resource to open the instrument</param>
            <param name="idQuery">Check Identification query and throw an exception if the instrument does not fit the supported instruments</param>
            <param name="resetDevice">Perform a reset</param>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.#ctor(System.Byte[])">
            <summary>
            Creates a new driver object with using the existing session from another driver
            Does not check the *IDN? response, and does not perform Reset
            <para>Exceptions: VisaException, VisaTimeoutException, RsInstrumentException, InstrumentStatusException</para>
            </summary>
            <param name="directSession">If not null, a new session will not be opened, but the directSession will be reused</param>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.FindResources(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Returns all the resource names fitting the entered expression
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.FindResources(System.String,System.Boolean,System.Boolean)">
            <summary>
            Returns all the resources fitting the expression for the default plugin
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.FindResources(System.Boolean,System.Boolean)">
            <summary>
            Returns all the resources ('?*') available for the default plugin
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.FindResources">
            <summary>
            Returns all the resources ('?*') available for the default plugin
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.FindResources(System.String)">
            <summary>
            Returns all the resources fitting the expression for the default plugin, no VXI-11 or LXI
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.AssertMinVersion(System.Version)">
            <summary>
            Asserts minimum RsInstrument version
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.AssertMinVersion(System.String)">
            <summary>
            Asserts minimum RsInstrument version
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.Dispose">
            <summary>
            Disposing of the driver object.
            Also closes the connection to the instrument
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrument.Dispose(System.Boolean)">
            <summary>
            Disposing of the driver object.
            Also closes the connection to the instrument
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.ArgumentStructBase">
            <summary>
            Base class for each driver argument structure
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.ArgumentStructBase.GetRawReturnData">
            <summary>
            Returns raw instrument response.
            Throws DataException if no response string was returned yet
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.RsInstrumentException">
            <summary>
            Base class from which all the RsInstrument exceptions are inherited
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.RsInstrumentException.ResourceString">
            <summary>
            Resource string of the session that threw the Exception
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.RsInstrumentException.#ctor(System.String,System.String)">
            <summary>
            The only available constructor with the message parameters
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.InstrumentStatusException">
            <summary>
            Instrument status exception thrown by the driver if an instrument error occurs
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.InstrumentStatusException.ErrorsList">
            <summary>
            List of all the error that occurred, the oldest one is first in the list
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.InstrumentStatusException.#ctor(System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            The only available constructor with the message parameters
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.VisaException">
            <summary>
            Exception thrown by the underlying VISA-C component
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.VisaException.#ctor(System.String,System.String)">
            <summary>
            The only available constructor with the message parameters
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.OperationTimeoutException">
            <summary>
            Exception for all the OPC instrument timeouts
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.OperationTimeoutException.Timeout">
            <summary>
            Timeout value reached
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.OperationTimeoutException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            The only available constructor with the message parameters
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.VisaTimeoutException">
            <summary>
            Exception for all the VISA and instrument timeouts
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.VisaTimeoutException.#ctor(System.String,System.String,System.Int32)">
            <summary>
            The only available constructor with the message parameters
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.StatusByte">
            <summary>
            Instrument's Status Byte flags
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.StatusByte.None">
            <summary>
            Null value
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.StatusByte.ErrorQueueNotEmpty">
            <summary>
            Signals that the instrument's error queue contains at least one entry
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.StatusByte.QuestionableStatusReg">
            <summary>
            Summary of Questionable Status register
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.StatusByte.MessageAvailable">
            <summary>
            Instrument's output IO buffer is not empty
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.StatusByte.EventStatusByte">
            <summary>
            Summary bit of Event Status Register filtered through the ESE byte
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.StatusByte.RequestService">
            <summary>
            Service request was triggered
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.StatusByte.OperationStatusReg">
            <summary>
            Summary of Operation Status register
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.InstrBinaryFloatNumbersFormat">
            <summary>
            Defines the coding of instrument's floating-point numbers in binary data
            Swapped means the endianness of the instrument is different from endianness of the Control PC
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrBinaryFloatNumbersFormat.Single4Bytes">
            <summary>
            4 bytes/number (FORMAT REAL,32)
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrBinaryFloatNumbersFormat.Single4BytesSwapped">
            <summary>
            4 bytes/number (FORMAT REAL,32) swapped endianness
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrBinaryFloatNumbersFormat.Double8Bytes">
            <summary>
            8 bytes/number (FORMAT REAL,64 or FORMAT REAL)
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrBinaryFloatNumbersFormat.Double8BytesSwapped">
            <summary>
            8 bytes/number (FORMAT REAL,64 or FORMAT REAL) swapped endianess
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.InstrBinaryIntegerNumbersFormat">
            <summary>
            Defines the coding of instrument's integer numbers in binary data
            Swapped means the endianness of the instrument is different from endianness of the Control PC
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrBinaryIntegerNumbersFormat.Integer324Bytes">
            <summary>
            4 bytes/number (FORMAT INT,32)
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrBinaryIntegerNumbersFormat.Integer324BytesSwapped">
            <summary>
            4 bytes/number (FORMAT INT,32) swapped endianness
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrBinaryIntegerNumbersFormat.Integer162Bytes">
            <summary>
            2 bytes/number (FORMAT INT,16)
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrBinaryIntegerNumbersFormat.Integer162BytesSwapped">
            <summary>
            2 bytes/number (FORMAT INT,16) swapped endianness
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.BaseInstrEventArgs">
            <summary>
            Base event arguments for RsInstrument
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.BaseInstrEventArgs.ResourceName">
            <summary>
            Resource name of the session that generated the event
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.BaseInstrEventArgs.Context">
            <summary>
            Context of the event. Usually the sent SCPI command.
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.BaseInstrEventArgs.StartTimestamp">
            <summary>
            Time of beginning of the operation
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.BaseInstrEventArgs.Duration">
            <summary>
            Duration of the operation
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BaseInstrEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InstrEventArgs class.
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BaseInstrEventArgs.ToString">
            <summary>
            String representation of the class
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BaseInstrEventArgs.SetDuration(System.TimeSpan)">
            <summary>
            Sets duration of the event operation as TimeSpan
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BaseInstrEventArgs.SetDuration(System.DateTime)">
            <summary>
            Sets duration of the event operation
            by calculating it from the entered time and the StartTimestamp
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.BaseInstrEventArgs.SetDuration">
            <summary>
            Sets duration of the event operation
            by calculating it from the time now and the StartTimestamp
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.InstrEventArgs">
            <summary>
            Base event arguments for RsInstrument
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.InstrEventArgs.Data">
            <summary>
            Response data. The actual format depends on the type of the query
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.InstrEventArgs.BinData">
            <summary>
            True, if the data is binary
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.InstrEventArgs.StatusByte">
            <summary>
            Status Byte value at the time of invoking
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.InstrEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InstrEventArgs class.
            </summary>
        </member>
        <member name="T:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs">
            <summary>
            Event arguments for chunk transfer events
            </summary>
        </member>
        <member name="P:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs.RemainingSize">
            <summary>
            Remaining size to transfer
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs.TotalSize">
            <summary>
            Total size of the data. If unknown, the value is set to -1
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs.TransferredSize">
            <summary>
            Size of the data transferred so far
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs.SegmentIx">
            <summary>
            Actual number of the segment (1-based)
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs.SegmentSize">
            <summary>
            Size of one data segment
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs.DataStream">
            <summary>
            For Query operations, this field contains the actual stream used to read the values
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs.SegmentDataOffset">
            <summary>
            Offset in the DataStream where the current segment data start
            </summary>
        </member>
        <member name="F:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs.Finished">
            <summary>
            Signals true, if the transfer is finished
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the InstrChunkEventArgs class.
            </summary>
        </member>
        <member name="M:RohdeSchwarz.RsInstrument.InstrSegmentEventArgs.ToString">
            <summary>
            String representation of the class
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.ArgAttribute">
            <summary>
            Describes an argument in the data structure.
            This info is used to parse a string query response to the output structure (when reading from instrument),
            or to format the structure to the string parameter (when writing to the instrument).
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.ArgAttribute.HasValue">
            <summary>
            Non-optional arguments always have value
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.ArgSingle">
            <summary>
            Specification for a separate argument that is not a part of a structure 
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.ArgsStringComposer">
            <summary>
            Class for creating a parameter string from a single argument.
            Reverse operation to ArgStringParser.
            Used by both ArgumentsStruct and the ArgumentsSingleList classes for composing instrument write string.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ArgsStringComposer.FromScalarArg(InstrumentDrivers.Internal.IArgConvertible)">
            <summary>
            Returns string representation of a single argument value converted
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ArgsStringComposer.FromArrayArg(InstrumentDrivers.Internal.IArgConvertible)">
            <summary>
            Returns one csv-string from an array argument with all the items remaining in the argument array
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ArgsStringComposer.FromArrayArg(InstrumentDrivers.Internal.IArgConvertible,System.Int32,System.Int32)">
            <summary>
            Returns one csv-string from an array argument with specific items count
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ArgsStringComposer.GetArgArraySize(InstrumentDrivers.Internal.IArgConvertible)">
            <summary>
            Returns array size of the argument assumming it is an array
            If the argument is not an array, the method returns -1
            </summary>
            <returns></returns>
        </member>
        <member name="T:InstrumentDrivers.Internal.ArgsStringParser">
            <summary>
            Class for parsing responses from instrument to a return structure.
            It is used by the ArgumentsStruct class for filling structures with return values.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ArgsStringParser.ToScalarValue(InstrumentDrivers.Internal.IArgConvertible)">
            <summary>
            Parses the current element to a scalar argument
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.ArgsStringParser.ToArrayValue(InstrumentDrivers.Internal.IArgConvertible,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Parses the current element to an array argument.
            If the incrPosition is true, the Parser's internal index counter increases by the number or parsed elements.
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.ArgSuppressed">
            <summary>
            Specification for a suppressed argument.
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.ArgumentsSingleList">
            <summary>
            Describes list of separate arguments.
            Provides only one method:
            - ComposeCmdString: from 1 or more ArgSingle composes SCPI string to send to the instrument.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ArgumentsSingleList.ComposeCmdString(System.Collections.Generic.Dictionary{System.Int32,InstrumentDrivers.Internal.ArgSingle})">
            <summary>
            Composes the string argument from the list of arguments
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.ArgumentsStruct">
            <summary>
            Describes an entire structure of arguments for which each argument has an ArgumentAttribute
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ArgumentsStruct._GetStructArgAttrs">
            <summary>
            Returns a dictionary with the structure members' attributes
            </summary>
            <returns></returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.ArgumentsStruct.ParseFromCmdResponse(System.String)">
            <summary>
            Fills the structure from the entered string content (command response)
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.ArgumentsStruct.ComposeCmdString">
            <summary>
            Composes the string argument from the structure for sending to the instrument
            </summary>
            <returns></returns>
        </member>
        <member name="T:InstrumentDrivers.Internal.CommandsGroup">
            <summary>
            Contains methods dealing with RepCaps and Group object cloning
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.CommandsGroup.Parent">
            <summary>
            Parent group
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.CommandsGroup.GroupName">
            <summary>
            Name of the group
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.CommandsGroup.RepCap">
            <summary>
            Repeated capability. Null if none is available
            Contains one repcap definition - one enum and one value
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.CommandsGroup.HasRepCap">
            <summary>
            Returns true, if the group has a RepCap
            Returns false for a group with MultiRepCaps
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.CommandsGroup.MultiRepCapTypes">
            <summary>
            If the group contains multi-repcaps, this field is filled with comma-separated values with used repcap types
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.CommandsGroup.HasMultiRepCaps">
            <summary>
            Returns true, if the group has MultiRepCaps defined
            Returns false for a group with single repcaps
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.CommandsGroup.ToString">
            <summary>
            String representation of the Commands Group
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.CommandsGroup.AddExistingChild(InstrumentDrivers.Internal.ICmdGroup)">
            <summary>
            Adds the child to the parent's list of created children
            This is used when the group is cloned, where the whole existing tree
            of groups have to be recreated
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.CommandsGroup.SetRepCapEnumValue(System.Object)">
            <summary>
            Sets RepCap value as enum
            Default is not allowed.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.CommandsGroup.GetRepCapEnumValue">
            <summary>
            Returns RepCap value as enum
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.CommandsGroup.GetRepCapCmdValue(System.Object)">
            <summary>
            Returns the current string of RepCapCmdValue for the entered RepCapEnumName
            The RepCapEnumName can be of the current CommandsGroup or any of their parents
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.CommandsGroup.SynchroniseRepCaps(System.Object)">
            <summary>
            Clones the existing group repeated capabilities to the new one
            Because of the lazy group properties, the group clones are created by accessing the repcaps in them 
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.CommandsGroup.RestoreRepCaps">
            <summary>
            Clones the existing group repeated capabilities to the new one
            Because of the lazy group properties, the group clones are created by accessing the repcaps in them 
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.CommandsGroup.GetDescendantExistingChildren">
            <summary>
            Get all the existing descendant groups recursively
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.CommandsGroup.GetOwnersChain">
            <summary>
            Returns the parent chain up to the root
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.CommandsGroup.GetOwnersChain(InstrumentDrivers.Internal.ICmdGroup)">
            <summary>
            Returns the parent chain up to the entered point
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.ICmdGroup">
            <summary>
            Interface implemented by each CommandsGroup,
            This allows for collection of all the defined repcaps up to the root group
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.ICmdGroup.Parent">
            <summary>
            Parent group
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.ICmdGroup.GroupName">
            <summary>
            Name of the group
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.ICmdGroup.RepCap">
            <summary>
            Repeated capability. Null if none is available
            Contains one repcap definition - one enum and one value
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.ICmdGroup.HasRepCap">
            <summary>
            Returns true, if the group has a RepCap
            Returns false for a group with MultiRepCaps
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.ICmdGroup.MultiRepCapTypes">
            <summary>
            If the group contains multi-repcaps, this field is filled with comma-separated values with used repcap types
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.ICmdGroup.HasMultiRepCaps">
            <summary>
            Returns true, if the group has MultiRepCaps defined
            Returns false for a group with single repcaps
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ICmdGroup.AddExistingChild(InstrumentDrivers.Internal.ICmdGroup)">
            <summary>
            Adds the child to the parent's list of created children
            This is used when the group is cloned
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ICmdGroup.GetDescendantExistingChildren">
            <summary>
            Get all the descendant groups recursively
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ICmdGroup.GetOwnersChain">
            <summary>
            Returns the owners chain including itself up to the entered point or up to the root by default
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ICmdGroup.GetOwnersChain(InstrumentDrivers.Internal.ICmdGroup)">
            <summary>
            Returns the owners chain including itself up to the entered point or up to the root by default
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.Core">
             <summary>
             Base class for communication with instrument
            
             Version 1.24.0.68 - 20.04.2023
             - Changed the accepted IDN? response to more permissive.
             - Added SkipStatusSystemSettings to the options string, default value is false.
             - Added Utilities methods GoToLocal(), GoToRemote().
             
             Version 1.23.0.67 - 30.05.2022
             - Changed parsing of SYST:ERR? response to tolerate +0,"No Error" response.
             
             Version 1.22.0.65 - 31.03.2022
             - Added platform - dependent Visa DLL load for .NET Core builds. The loading now works for Linux and OSX.
             - Added µ to the list of known SI-prefixes for double, int32, int64 conversions.
             - Added Session settings string tokens DisableStbQuery (false), DisableOpcQuery (false).
             
             Version 1.21.0.61 - 15.10.2021
             - Fixed several issues regarding the auto-generated drivers
             - Removed unused methods from Instrument and VisaSession classes
             - Fixed VISA read buffer in case of multi-threading access
             - Fixed Instrument.CheckStatus() which was skipped if the QueryInstrumentStatus was false. Now the error checking is performed regardless that settings.
             - Added correct conversion of strings with SI suffixes (e.g.: MHz, KHz, THz, GHz, ms) to double, int32, int64
             
             Version 1.20.0.60 - 13.08.2021
             - Added custom enum values support, and _cma_ enum escape character for comma in enums
             - Added WriteStructureWithOpc()
             
             Version 1.19.0.57 - 16.04.2021
             - Changed behaviour of RepCaps with enum value 0 - now they are formatted to the SCPI command not as an empty string, but as "0"
             
             Version 1.18.0.55 - 19.01.2021
             - Added matching of Enum instrument responses also in short/long form
             
             Version 1.17.0.54 - 14.01.2021
             - Added Instrument.QueryOpc(int visaTimeout)
             - Fixed error where the System.TimeoutException was thrown instead of the RsInstrument.VisaTimeoutException
             
             Version 1.16.0.53 - 14.12.2020
             - Fixed setting of VISA Timeout by init to 10000ms
             - Added "DTX", "Dtx", "dtx" to a list of values that are represented as NaN
            
             Version 1.15.0.52 - 16.11.2020
             - Added data types for extended Integer and Double (with the encoding/decoding of special strings like "ON" / "OFF"
             - Added data type Integer64
             
             Version 1.14.0.50 - 16.11.2020
             - Core change: Added method 'ToScpiCsvString()' for conversion of list of enums to csv-scpi-string to be sent to the instrument
             
             Version 1.13.0.49 - 11.11.2020
             - Core change: Conversion of the empty returned string to array returns empty array.
                 Before, the empty string was converted to an array of one empty element.
             
             Version 1.12.1.48 - 09.11.2020
             - Fixed parsing of the instrument errors when an error message contains two double quotes
             
             Version 1.12.0.47 - 21.10.2020
             - Added 'UND' to the list of numbers that are represented as NaN
             
             Version 1.11.0.46 - 18.10.2020
             - SCPI response string conversion to scalar enum: if the string contains ',', the content after it inclusive the comma is ignored
             
             Version 1.10.0.44 - 07.10.2020
             - Added QueryStructureWithOpc()
             
             Version 1.9.0.43 - 05.10.2020
             - Added simple Enum->ScpiString method ToScpiString()
             - Added TermChar settings. Default is '\n'
             
             Version 1.8.3.42 - 17.09.2020
             - Added coding/decoding of of special characters in enums (dot, dash, minus)
             
             Version 1.8.2.41 - 04.09.2020
             - Fixed error for instruments that do not support *OPT? query
             - The Property Instrument.InstrOptions is now lazy, the *OPT? is only sent on the first user request
             
             Version 1.8.1.40 - 24.08.2020
             - Fixed simulation mode issues when the session was cloned
             - Fixed simulation mode issues when no simulation *IDN? and *OPT? strings are defined
             - Deleted InstrumentOptions methods ThrowIfMissing()
             
             Version 1.8.0.38 - 11.08.2020
             - Implemented SocketIO Visa Plugin that does not need VISA
             - New Options token: 'SelectVisa' e.g.: 'SelectVisa=SocketIO'
             - Options token 'PreferRsVisa' is now obsolete (but still supported)
             
             Version 1.7.1.37 - 04.08.2020
             - Fixed buffer size for Nrp-Z sessions
            
             Version 1.7.0.36 - 17.07.2020
             - Changed to AnyCPU build
             - Added Session Settings bool AssureResponseEndWithLF
            
             Version 1.6.0.34 - 19.06.2020
             - Added invoking read_segmented event for the first chunk of the ReadUnknownLength()
             - Added Repeated Capabilities class to the command Groups
             
             Version 1.5.0.32 - 10.01.2020
             - Changed RsInstrument.ini to SessionSettings.xml with conditional settings based on ResourceName and SessionKind
             - Fixed FitsIdnPattern(): Fitting IDN string pattern is done case-insensitive
             - Support for NRP-Zxx instruments
            
             Version 1.4.0.30 - 29.11.2019
             - Cleaned up unused classes, added RsInstrument exceptions
             - Added RsInstrument.ini file for {resourceName} = {optionsString}
             - Added OPC with Events
             - Added segmented read / write events
             
             Version 1.3.0 (build 24) - 15.11.2019
             - Added recognition for special values when decoding from string to enum
             - Synchronized special values for string -> decimal with python core
             - Fixed simulation mode
             - Fixed trimming LF for string responses
             
             Version 1.2.0.0 - 25.07.2019
             - Visa has now ~Visa() method, performs viClose() if the session was not directly passed from another object
             - Fixed update of internally linked arguments that are not suppressed - e.g. in result structures
             - Fixed VisaSession.QueryBinaryData()
             - RsDrvFormat.ToDoubleArray(), RsDrvFormat.ToInt32Array(), RsDrvFormat.ToBooleanArray() - return 0-size array if the input string is empty
             - Fixed methods Instrument.QueryBinaryOrAsciixxx() for cases when empty-ASCII array is returned
             - Added Utilities.OpcQueryAfterEachSetting
             - Added special values recognition for 'INV' and 'NCAP'
             - Added support for optional values when composing the command send parameters
             
             Version 1.1.0.0 - 14.06.2019
             - Improved error messages in case of an invalid VISA session
             
             Version 1.0.0.0 - 04.01.2019
             - First non-attributes version
             </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Core.Owner">
            <summary>
            Owner of the core - usually the driver object
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Core.Version">
            <summary>
            Version of the Core and the whole Internal Folder
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Core.IO">
            <summary>
            Interface for instrument's Write and Query operations.
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Core.SupportedInstrModels">
            <summary>
            List of instrument models supported by the driver - used only in the exception message
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Core.SupportedIdnPatterns">
            <summary>
            List of RegEx patterns to evaluate whether the current instrument model is supported by the driver
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Core.DriverVersion">
            <summary>
            Instrument driver version
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.#ctor(System.String,System.Boolean,System.Boolean,System.String,System.String,System.Byte[])">
            <summary>
            Constructor with all parameters
            </summary>
            <param name="resourceName">VISA resource to open the instrument</param>
            <param name="idQuery">Check Identification query and throw an exception if the instrument does not fit the supported instruments</param>
            <param name="resetDevice">Perform a reset</param>
            <param name="driverOptions">Additional driver-specific options</param>
            <param name="userOptions">Additional user options</param>
            <param name="directSession">If not null, a new session will not be opened, but the directSession will be reused</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.Dispose(System.Boolean)">
            <summary>
            Disposes of the Core object
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.RegisterForReturnArgSuppressed(System.String,System.EventHandler{InstrumentDrivers.Internal.Instrument.ReturnArgLinkedEventArgs})">
            <summary>
            Allows for the custom driver to register for value changed events. One handler can only be registered once
            </summary>
            <param name="name">Name of the parameter to be invoke an Value Change event on</param>
            <param name="handler">event handler to associate with the event</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core._C_ReturnArgLinked(System.Object,InstrumentDrivers.Internal.Instrument.ReturnArgLinkedEventArgs)">
            <summary>
            Splits the events to their appropriate event handlers
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.AddLogger(System.IO.Stream)">
            <summary>
            Add new StreamWriter listener
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.RemoveLogger(System.IO.Stream)">
            <summary>
            Remove StreamWriter listener
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.WriteStringToLog(System.String)">
            <summary>
            Writes string message to log.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.IsOptionAvailable(System.String)">
            <summary>
            Returns true, if the instrument has the entered option installed
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.ComposeCmdArg(InstrumentDrivers.Internal.ArgSingle)">
            <summary>
            Composes 1 parameter as a string from the ArgumentDefine definition
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.ComposeCmdArg(InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle)">
            <summary>
            /// Composes 2 parameters as a string from the ArgumentDefine definitions
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.ComposeCmdArg(InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle)">
            <summary>
            /// Composes 3 parameters as a string from the ArgumentDefine definitions
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.ComposeCmdArg(InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle)">
            <summary>
            /// Composes 4 parameters as a string from the ArgumentDefine definitions
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.ComposeCmdArg(InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle)">
            <summary>
            /// Composes 5 parameters as a string from the ArgumentDefine definitions
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.ComposeCmdArg(InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle)">
            <summary>
            /// Composes 6 parameters as a string from the ArgumentDefine definitions
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.ComposeCmdArg(InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle)">
            <summary>
            /// Composes 7 parameters as a string from the ArgumentDefine definitions
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.ComposeCmdArg(InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle)">
            <summary>
            /// Composes 8 parameters as a string from the ArgumentDefine definitions
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Core.ComposeCmdArg(InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle,InstrumentDrivers.Internal.ArgSingle)">
            <summary>
            /// Composes 9 parameters as a string from the ArgumentDefine definitions
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.InstrumentErrors">
            <summary>
            Instrument-class related errors
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.InstrumentErrors.AssertNoInstrumentStatusErrors(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
            Checks the errors list and of it contains at least one element, throws InstrumentStatusException
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.InstrumentErrors.ThrowOpcToutException(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Throws OperationTimeoutException - use it for any timeout error
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.InstrumentErrors.AssertCommandContainsNoQuestionMark(System.String,System.String,System.String)">
            <summary>
            Checks a command and throws RsInstrumentException if the command contains a question-mark
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.InstrumentErrors.AssertQueryContainsQuestionMark(System.String,System.String,System.String)">
            <summary>
            Checks a command and throws RsInstrumentException if the query does not contain a question-mark
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.Instrument">
            <summary>
            Model of an Instrument with VISA interface
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.Manufacturer">
            <summary>
            Manufacturer of the instrument (From *IDN?)
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.Model">
            <summary>
            // e.g. FSW or NRP. If _identificationModelFullName == True, the Model is FSW26 or NRP67A
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.FullInstrumentModelName">
            <summary>
            always full name - e.g. FSW26 or NRP67A (From *IDN?)
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.SerialNumber">
            <summary>
            Instrument's serial number (From *IDN?)
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.FirmwareRevision">
            <summary>
            Instrument's firmware version (From *IDN?)
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.Settings">
            <summary>
            Setting of the Instrument session
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.ResourceName">
            <summary>
            Resource name of the Visa Instrument
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.QueryInstrumentStatus">
            <summary>
            If True, the instrument performs CheckStatus() after each SCPI command
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.ReadStbVisaTimeoutMs">
            <summary>
            Any positive number changes VISA Timeout for the duration of STB polling
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.SessionType">
            <summary>
            Session type: Gpib, Serial, Vxi11, Hislip, Socket, Usb
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.ReadDelay">
            <summary>
            Delay before each Read()
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.WriteDelay">
            <summary>
            Delay before each Write()
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.IdnString">
            <summary>
            Use only in Simulation mode. This sets/reads the instrument's *IDN? string.
            The *IDN? string is immediately parsed for properties Manufacturer, Model, SerialNumber, FirmwareRevision
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.Simulate">
            <summary>
            True: Instrument in simulation mode
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.IoSegmentSize">
            <summary>
            Maximal size of one transferred data segment
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.VisaManufacturer">
            <summary>
            Manufacturer of VISA used by the instrument
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.VisaDllName">
            <summary>
            Used Visa DLL name including bittness
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.VisaTimeoutMs">
            <summary>
            VISA Timeout
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.OpcTimeoutMs">
            <summary>
            Opc Timeout in milliseconds
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.LoggingEnabled">
            <summary>
            Logging of the VISA communication
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.LoggingDebugMessages">
            <summary>
            Logger debug messages to include source information
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.OpcQueryAfterEachSetting">
            <summary>
            Sets / Gets Instrument *OPC? query sending after each settings
            When true, the driver sends *OPC? every time a write command is performed
            For queries, the *OPC? is skipped
            Use this if you want to make sure your sequence is performed command-after-command
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.BinFloatNumbersFormat">
            <summary>
            Defines the coding of floating-point numbers in binary data
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.BinIntegerNumbersFormat">
            <summary>
            Defines the coding of integer numbers in binary data
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.InstrumentOptionsString">
            <summary>
            Simulation mode *OPT? response. This is set-only property to apply a new instrument options string.
            In real mode, the actual *OPT? response it parsed.
            The string is parsed with the parse mode defined in InstrumentProperties when initializing the Instrument.
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.InstrOptions">
            <summary>
            Instrument Options object for installed option-checking operations
            This is a lazy property, the internal property _instrOptions is initialized on the first access
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.SelfTestTimeout">
            <summary>
            Timeout for Self-test procedure
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.Session">
            <summary>
            Serialized session data
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.#ctor(System.String,System.Byte[],System.Xml.Linq.XElement)">
            <summary>
            Opening an instrument session. If simulate is true, it cannot be later switched to false anymore
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.ToString">
            <summary>
            String representation of the object: "Instrument {vendor}, {Session Kind}, '{resource name}'"
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.AssignLock(System.Object)">
            <summary>
            Assigns new locking object. Use it to synchronise between multiple Instrument objects
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.GetLock">
            <summary>
            Returns locking object. Use it to synchronise between multiple Instrument objects
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.ReturnArgLinked">
            <summary>
            Register for this event to get an event if a return argument was suppressed
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.ReadSegmentHandler">
            <summary>
            Event handler for segmented reads
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Instrument.WriteSegmentHandler">
            <summary>
            Event handler for segmented writes
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument._QueryOptionsAndParse(InstrumentDrivers.Internal.InstrOptionsParseMode)">
            <summary>
            Queries *OPT? and creates a new instance of the InstrumentOptions
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument._ParseIdnString(System.String)">
            <summary>
            Parse the *IDN? response to Manufacturer, Model, SerialNumber and FirmwareRevision
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument._ParseErrorQueryResponse(System.String)">
            <summary>
            Parses entered response string to string,
            Returns only the string part of the message
            e.g.: response = '-110,"Command error"'
            returns: 'Command error'
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument._ReplaceGlobalRepCaps(System.String)">
            <summary>
            Replaces all the global repCaps in the command: e.g. "{instance}" => "1"
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument._QueryBinaryData(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Queries binary data to byte array.
            If the exceptionIfNotBinData is true, an exception is thrown if the read data does not begin with '#'
            Returns true, if the response was binary data, otherwise false
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument._QueryBinaryDataWithOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization.
            Also performs error checking if the property QueryInstrumentStatus is set to true and allowCheckStatus is True
            If the exceptionIfNotBinData is true, an exception is thrown if the read data does not begin with '#'
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.FitsIdnPattern(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>
            Checks the instrument's IdnString against the provided patterns.
            Throws the RsInstrumentException, if none of the patterns in the array are found in the instrument's IdnString.
            idnPatterns - RegEx patterns to match in the IdnString
            supportedInstrModels is a list of instrument models only used for the exception message
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.SelfTest(System.Int32)">
            <summary>
            Perform standard self test by sending *TST? query and returns the result
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.SelfTest">
            <summary>
            Perform standard self test by sending *TST? query
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.CheckStatus(System.Boolean)">
            <summary>
            Check status method to be used publicly
            Throws InstrumentStatusException in case of an error in the instrument's error queue.
            The procedure is skipped, if the QueryInstrumentStatus is set to false or force it with forceCheck to true
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.CheckStatus">
            <summary>
            Check status method to be used publicly
            Throws InstrumentStatusException in case of an error in the instrument's error queue.
            The procedure is skipped, if the QueryInstrumentStatus is set to false.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument._AssertNoSystErrorsAndLog">
            <summary>
            Asserts that the SYST:ERR? does not return any errors.
            If so, throw the InstrumentStatusException.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.IsInstrumentModel(System.String)">
            <summary>
            Returns true, if the current instrument model fits the entered model string
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.AddGlobalRepCap(System.String,InstrumentDrivers.Internal.RepeatedCapability)">
            <summary>
            Adds global repcap identified with the name
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.SetGlobalRepCapValue(System.String,System.Object)">
            <summary>
            Sets the new global repCap value as enum value
            Can not be Default
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.GetGlobalRepCapValue(System.String)">
            <summary>
            Returns new current global repcap value as enum object
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.ClearStatus">
            <summary>
            Clears instrument's status subsystem
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.Reset">
            <summary>
            Sends *RST to the instrument
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryErrorsAll">
            <summary>
            Uses SYSTEM:ERROR? query in a loop to read and delete all the errors in the instrument's error queue.
            The errors are ordered from the oldest ones to the newest one
            If no error is present, the method returns an empty collection
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryOldestError">
            <summary>
            Uses SYSTEM:ERROR? query to read and delete the oldest error in the instrument's error queue.
            If no error is present, the method returns {code=0, msg='No Error'}
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.Write(System.String)">
            <summary>
            Writes string command to the instrument
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.WriteWithOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Writes command with OPC synchronization.
            Also performs error checking if the property QueryInstrumentStatus is set to true and allowCheckStatus is true.
            If you omit the timeout or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.WriteWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Writes command with OPC synchronization.
            Also performs error checking if the property QueryInstrumentStatus is set to true.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryString(System.String)">
            <summary>
            Sends a query and reads response from the instrument.
            The returned response is trimmed of any trailing TermChars and has no length limit.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryStringWithOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization.
            Also performs error checking if QueryInstrumentStatus is true and allowCheckStatus is true
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryStringWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization.
            Also performs error checking if QueryInstrumentStatus is true.
            The response is trimmed of any trailing TermChars and has no length limit.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryInt32(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Int32
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryInt32WithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends opc-synced query and reads response from the instrument as Int32.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryInt64(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Int64
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryInt64WithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends opc-synced query and reads response from the instrument as Int64.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryDouble(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Double
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryDoubleWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends opc-synced query and reads response from the instrument as Double.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBoolean(System.String)">
            <summary>
            Sends a query and reads response from the instrument as Boolean
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBooleanWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Sends opc-synced query and reads response from the instrument as Boolean.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryStringArray(System.String)">
            <summary>
            Queries string of unknown size from instrument, and represents it as an array of comma-separated strings array
            If the response from the instrument is empty, the method returns 0-length array.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryStringArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries string of unknown size from instrument, and represents it as an array of comma-separated strings array.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout.
            If the response from the instrument is empty, the method returns 0-length array.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryAsciiDoubleArray(System.String,System.Nullable{System.Double})">
            <summary>
            Queries string of unknown size from instrument, and represents it as comma-separated double array
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue.
            If the response from the instrument is empty, the method returns 0-length array.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryAsciiInt32Array(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries string of unknown size from instrument, and represents it as comma-separated integer array.
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue.
            If the response from the instrument is empty, the method returns 0-length array.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryAsciiInt64Array(System.String,System.Nullable{System.Int64})">
            <summary>
            Queries string of unknown size from instrument, and represents it as comma-separated integer array.
            If you provide defValue, any parsing exception is suppressed an the method returns that defValue.
            If the response from the instrument is empty, the method returns 0-length array.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryAsciiBooleanArray(System.String)">
            <summary>
            Queries string of unknown size from instrument, and represents it as comma-separated booleans array
            If the response from the instrument is empty, the method returns 0-length array.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryStructure(System.String,System.Object)">
            <summary>
            Queries string of unknown size from instrument, and parses it to the given object structure based on the object attributes.
            'structure' is a structure object that should be filled.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryStructureWithOpc(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Queries with OPC string of unknown size from instrument, and parses it to the given object structure based on the object attributes.
            'structure' is a structure object that should be filled.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryStringSuppressed(System.String,InstrumentDrivers.Internal.ArgSuppressed)">
            <summary>
            Queries string of unknown size from instrument, and returns a string part without the suppressed argument
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryStringArraySuppressed(System.String,InstrumentDrivers.Internal.ArgSuppressed)">
            <summary>
            Queries string of unknown size from instrument, cuts away the part with the suppressed argument,
            and represents it as an array of comma-separated strings array
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryDoubleSuppressed(System.String,InstrumentDrivers.Internal.ArgSuppressed)">
            <summary>
            Queries string of unknown size from instrument
            Returns a string part converted to double without the suppressed argument
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryInt32Suppressed(System.String,InstrumentDrivers.Internal.ArgSuppressed)">
            <summary>
            Queries string of unknown size from instrument
            Returns a string part converted to int32 without the suppressed argument
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBooleanSuppressed(System.String,InstrumentDrivers.Internal.ArgSuppressed)">
            <summary>
            Queries string of unknown size from instrument
            Returns a string part converted to boolean without the suppressed argument
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.WriteStructure(System.String,System.Object)">
            <summary>
            Componses a string from the given object structure and its attributes
            and sends it to the instrument.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.WriteStructureWithOpc(System.String,System.Object,System.Nullable{System.Int32})">
            <summary>
            Componses a string from the given object structure and its attributes
            and sends it to the instrument.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.WriteBinaryData(System.String,System.IO.Stream)">
            <summary>
            Writes all the stream data as binary data to the instrument
            It sends the entered command, followed by the constructed binary data header and the binary data from the stream.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.WriteBinaryData(System.String,System.Byte[])">
            <summary>
            Writes all the data as binary data to the instrument
            It sends the entered command, followed by the constructed binary data header and the binary data from the binaryData.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryData(System.String)">
            <summary>
            Queries binary data from the instrument and returns it as byte array
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryData(System.String,System.IO.Stream)">
            <summary>
            Queries binary data from the instrument and returns it to the provided stream
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryDataWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization.
            Also performs error checking if the property QueryInstrumentStatus is set to true.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryDataWithOpc(System.String,System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Query binary data with OPC synchronization, and returns it in the entered Stream.
            Also performs error checking if the property QueryInstrumentStatus is set to true
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiFloatArray(System.String)">
            <summary>
            Queries an array of floating-point numbers that can be returned as ASCII format or in binary format.
            The array is always returned as the most-universal double array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiSingleFloatArray(System.String)">
            <summary>
            Queries an array of floating-point numbers that can be returned in ASCII format or in binary format.
            The array is always returned as single array.
            If the BinaryFloatNumbersFormat is Double8Bytes or Double8BytesSwapped, the method throws ArgumentException.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiFloatArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of floating-point numbers with OPC sync.
            The numbers can be returned in ASCII format or in binary format. The array is returned as double array.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiSingleFloatArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of single floating-point numbers with OPC sync.
            The numbers can be returned in ASCII format or in binary format. The array is always returned as single float array.
            If the BinaryFloatNumbersFormat is Double8Bytes or Double8BytesSwapped, the method throws ArgumentException.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiFloatArraySuppressed(System.String,InstrumentDrivers.Internal.ArgSuppressed)">
            <summary>
            Same as QueryBinaryOrAsciiFloatArray, but suppresses an argument at the beginning ending with a comma.
            Only numeric scalar as suppressed is supported
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiIntegerArray(System.String)">
            <summary>
            Queries an array of integer numbers that can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiIntegerArrayWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries an array of integer numbers with OPC synchronization.
            The numbers can be returned in ASCII format or in binary format.
            The array is always returned as the most-universal int32 array.
            If you omit the timeout out or set it to null / -1 / 0, the method uses the current OPC timeout
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiIntegerArraySuppressed(System.String,InstrumentDrivers.Internal.ArgSuppressed)">
            <summary>
            Same as QueryBinaryOrAsciiIntegerArray, but suppresses an argument at the beginning ending with a comma
            Only numeric scalar as suppressed is supported
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryOpc">
            <summary>
            Sends *OPC? query and reads the result. Does not check the instrument status.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryOpc(System.Int32)">
            <summary>
            Sends *OPC? query and reads the result. Does not check the instrument status.
            The VISA timeout is defined only for this call.
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.Instrument.WriteWithOpcHandler">
            <summary>
            Handlers for all the Write with OPC events
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.Instrument.QueryWithOpcHandler">
            <summary>
            Handlers for all the Query with OPC events
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.WriteStringWithOpcEvent(System.String)">
            <summary>
            Writes the command to the instrument and invokes the WriteWitOpcHandler when the operation has completed
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryStringWithOpcEvent(System.String)">
            <summary>
            Queries the instrument and invokes the QueryWithOpcHandler when the operation has completed
            The response is available in the InstrEventArgs.Data as string
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryDataWithOpcEvent(System.String)">
            <summary>
            Queries the instrument and invokes the QueryWithOpcHandler when the operation has completed
            The response is available in the InstrEventArgs.Data as MemoryStream
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiFloatArrayWithOpcEvent(System.String)">
            <summary>
            Queries an array of floating-point numbers with OPC sync.
            After the response arrives, the method invokes the QueryWithOpcHandler.
            The response is available in the InstrEventArgs.Data as double[] array
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            The numbers can be returned in ASCII format or in binary format.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiSingleFloatArrayWithOpcEvent(System.String)">
            <summary>
            Queries an array of single floating-point numbers with OPC sync.
            After the response arrives, the method invokes the QueryWithOpcHandler.
            The response is available in the InstrEventArgs.Data as single float[] array
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            The numbers can be returned in ASCII format or in binary format.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryFloatNumbersFormat, usually float 32-bit (FORM REAL,32).</para>
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.QueryBinaryOrAsciiIntegerArrayWithOpcEvent(System.String)">
            <summary>
            Queries an array of integer numbers with OPC sync.
            After the response arrives, the method invokes the QueryWithOpcHandler.
            The response is available in the InstrEventArgs.Data as int[] array
            Handler prototype: void EventHandler(object sender, InstrEventArgs args)
            The numbers can be returned in ASCII format or in binary format.
            <para>- For ASCII format, the array numbers are decoded as comma-separated values.</para>
            <para>- For Binary Format, the numbers are decoded based on the property BinaryIntegerNumbersFormat, usually int 32-bit (FORM INT,32).</para>
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.InstallSrqHandler(System.EventHandler{RohdeSchwarz.RsInstrument.InstrEventArgs},RohdeSchwarz.RsInstrument.StatusByte)">
            <summary>
            Installs a new srq handler invoked if ANY of the stbMask bits in the STB register is fulfilled
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.UninstallSrqHandler(RohdeSchwarz.RsInstrument.StatusByte)">
            <summary>
            Uninstalls the srq handler
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.GoToLocal">
            <summary>
            Tell the instrument to go to local
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.GoToRemote">
            <summary>
            Tell the instrument to go to remote
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.AddLogger(System.IO.Stream)">
            <summary>
            Add new StreamWriter listener
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.RemoveLogger(System.IO.Stream)">
            <summary>
            Remove StreamWriter listener
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Instrument.WriteStringToLog(System.String)">
            <summary>
            Writes string message to log
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.InstrumentOptions">
            <summary>
            Class for handling instrument options returned by the *OPT? query
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.InstrumentOptions._optionsList">
            <summary>
            Option strings sorted by the option number in the list
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.InstrumentOptions.#ctor(System.String,InstrumentDrivers.Internal.InstrOptionsParseMode)">
            <summary>
            Initializes an instance with initial optionsString parsed
            </summary>
            <param name="optionsString">Option string returned by the *OPT? query</param>
            <param name="mode"> Select how to parse each element</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.InstrumentOptions.ToString">
            <summary>
            Represent the object as comma-separated string
            </summary>
            <returns></returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.InstrumentOptions._InitializeFromString(System.String,InstrumentDrivers.Internal.InstrOptionsParseMode)">
            <summary>
            Parses options string into a string List.
            It removes double-entries, trims the white spaces and quotations marks.
            Sorts the option by the number, starting with K0, K1, K2, ... K2000, then B0, B1 ... B2000
            </summary>
            <param name="optionsString">option string returned by the *OPT? query</param>
            <param name="mode"> Select how to parse each element</param>
            <returns>Options List</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.InstrumentOptions.IsAvailable(System.String)">
            <summary>
            Returns true, if the entered option is available
            </summary>
            <param name="option">Option to check for presence</param>
            <returns></returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.InstrumentOptions.IsMissing(System.String)">
            <summary>
            Returns true, if the entered option is missing
            </summary>
            <param name="option">Option to check for presence</param>
            <returns></returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.InstrumentOptions.GetAll">
            <summary>
            Returns all the options
            </summary>
            <returns></returns>
        </member>
        <member name="T:InstrumentDrivers.Internal.InternalLinker">
            <summary>
            Class for:
            - cutting out suppressed arguments from a device response
            - invoking a callback if the argument has InternalLinking defined
            - holding the central callback 'Callback' for sending the linked data to the central core handler c_ReturnArgSuppressed
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.InternalLinker.Callback">
            <summary>
            Callback is called for all the linked parameters
            The Core has one callback handler added - c_ReturnArgSuppressed() that based on the linking name
            calls a specific callback further.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.InternalLinker.CutFromResponseString(InstrumentDrivers.Internal.ArgSuppressed,System.String,System.String)">
            <summary>
            Takes the string 'response', removes the suppressed argument value from it
            and returns the rest.
            The cut out part is sent via callback if the internal linking exists
            </summary>
            <param name="arg"></param>
            <param name="response"></param>
            <param name="contextForLinkedArg"></param>
            <returns></returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.InternalLinker.InvokeInternalLinking(InstrumentDrivers.Internal.ArgSuppressed,System.String,System.String)">
            <summary>
            Invokes the Callback, if the entered suppressed argument has an internal linking
            </summary>
            <param name="arg"></param>
            <param name="contextForLinkedArg"></param>
            <param name="value"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.InternalLinker.InvokeInternalLinking(InstrumentDrivers.Internal.ArgSingle,System.String,System.String)">
            <summary>
            Invokes the Callback, if the entered argument has an internal linking
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.InternalLinker.InvokeInternalLinking(System.Collections.Generic.Dictionary{System.Int32,InstrumentDrivers.Internal.ArgAttribute},System.String)">
            <summary>
            Invokes the Callback for each of the arguments that have internal linking
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.RepeatedCapability">
            <summary>
            Represents Repeated Capability value and type
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability._GetDirectCmdValueInt(System.Object)">
            <summary>
            Static function to get an integer interpretation of a direct enum value
            Does not work with Empty or Default
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability.GetCmdStringValue(System.Object)">
            <summary>
            Converts RepCap integer value to string
            ValueEmpty is converted to ""
            ValueDefault throws an exception
            0 is converted to "". If the enum contains the value null, then 0 is converted to "0"
            Positive numbers are converted to integer strings e.g. 1 => "1"
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability.IsDefaultValue(System.Object)">
            <summary>
            Returns true, if the entered value is enum.Default
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability.GetCmdStringValue">
            <summary>
            Converts RepCap integer value to string
            ValueEmpty is converted to ""
            ValueDefault is converted to null - invalid
            0 is converted to "0".
            Positive numbers are converted to integer strings e.g. 1 => "1", 2 => "2" and so on...
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability.IsDefaultValue">
            <summary>
            Returns true, if the current value is enum.Default
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.RepeatedCapability.Name">
            <summary>
            Name of the RepCap - corresponds to the Enum Type short name
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.RepeatedCapability.HeaderName">
            <summary>
            Name of the header - corresponds to the Commands Group name
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.RepeatedCapability.PropertyName">
            <summary>
            Name of the Group Property setting the value
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.RepeatedCapability.EnumType">
            <summary>
            Type of the RepCap enum. e.g. "InstanceRepCap"
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.RepeatedCapability._enumValue">
            <summary>
            RepCap value as enum value. Settable and gettable via methods
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability.#ctor(System.Type,System.String,System.String,System.Object)">
            <summary>
            Constructor with enum type, header name and the start value
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability.ToString">
            <summary>
            String representation of the RepCap
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability.SetEnumValue(System.Object)">
            <summary>
            Sets new enum value
            Can not be Default
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability.SetToStartValue">
            <summary>
            Sets back to the value entered in the constructor
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability.GetEnumValue">
            <summary>
            Returns current enum value
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RepeatedCapability.MatchesType(System.Type)">
            <summary>
            Returns true, if the entered type matches the EnumType
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.RepCapConstants">
            <summary>
            Static class for RepCap constants
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.RepCapConstants.ValueDefault">
            <summary>
            Command integer value that signals "DEFAULT"
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.RepCapConstants.ValueEmpty">
            <summary>
            Command integer value that signals "EMPTY"
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.EnumConversions.EnumValueToScpiString(System.Type,System.Object)">
            <summary>
            Conversion ENUM -> SCPIsend.
            Converts enum value (as object) to a SCPI string.
            Use this to send the scpi enum value to the instrument.
            Throws an exception if the enum value is not defined in the enum type.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.EnumConversions.ToScpiString``1(``0)">
            <summary>
            Conversion ENUM -> SCPIsend.
            Wrapper for EnumValueToScpiString used for simple conversion of enum value to SCPI string
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.EnumConversions.ToScpiCsvString``1(System.Collections.Generic.List{``0})">
            <summary>
            Conversion ENUM[] -> SCPIsend[].
            Wrapper for EnumValueToScpiString used for conversion of List{enum} value to SCPI CSV-string
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.EnumConversions.ToScpiEnum``1(System.String)">
            <summary>
            Conversion SCPIresponse -> ENUMvalue.
            Converts text to enum value.
            Special enum values, prefixes, and special integer string value same as the ToInt32() convertor
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.EnumConversions.ToScpiEnumList``1(System.String)">
            <summary>
            Conversion SCPIresponse[] -> ENUMvalue[].
            Converts csv-text (instrument-returned string) to List[enum].
            To optimize the performance, it does the members and potentiall membersSpec parsing only once for the entire array of conversions.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.EnumConversions.ScpiStringToEnumString(System.String,System.Type)">
            <summary>
            Conversion SCPIresonse -> ENUMstringValue.
            Returns string value of the provided enumType member.
            If the value is not found, the function returns null.
            If this function returns a non-null string, you can safely convert it to the enumType enum
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.ScpiEnums">
            <summary>
            Represents enum SCPI members and allows for resolving
            the Descrition Attribute.
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.ScpiEnums.HasCustomValues">
            <summary>
            If true, the enum contains custom values
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.ScpiEnums.HasQuotes">
            <summary>
            If true, the custom values contain quotes
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.ScpiEnums.EnumTypeInfo">
            <summary>
            Type information
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.ScpiEnums.Members">
            <summary>
            Contains all the member strings. If the member has a DescriptionAttribute, the description attribute is returned.
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.ScpiEnums._membersRaw">
            <summary>
            Exact members of the enum
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.ScpiEnums._membersSpec">
            <summary>
            _Members that are resolved by the special values.
            This is a lazy property to save time. It is initialized by the method ResolveSpecialValues()
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ScpiEnums.GetHasCustomValues(System.Type)">
            <summary>
            Returns true, if the entered enum has custom values
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ScpiEnums.GetScpiValue(System.String)">
            <summary>
            Returns the SCPI value of the item. If the item has no DescriptionAttribute,
            the method returns the standart item value converted to string.
            If the Description attribute exists, the method returns the string value of the DescriptionAttribute.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ScpiEnums.GetScpiValue(System.Object)">
            <summary>
            Returns the SCPI value of the item. If the item has no DescriptionAttribute,
            the method returns the standart item value converted to string.
            If the Description attribute exists, the method returns the string value of the DescriptionAttribute.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ScpiEnums.FindInEnumMembersAsString(System.Boolean,System.String)">
            <summary>
            Returns either an EnumMember item or null if not found.
            The matching is done against the Members, and if unsuccessful, then against the _membersSpec
            The response is always a member_raw item.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ScpiEnums.FindInEnumMembersAsObj(System.Boolean,System.String)">
            <summary>
            Returns the enum value as object
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ScpiEnums._FindIxInMembers(System.String[],System.Boolean,System.String)">
            <summary>
            Searches the 'item' in the list of 'members':
            - First as prefixes cs: item = 'MAX' matches members[x] = 'MAXpeak'
            - Then as short form by removing all the LC character a-z: item = 'SPECtrum1' matches members[x] = 'SPEC1'
            If the item contains a comma, the function checks if there is a comma defined in the enum_members.
            - If no, the comma and all after it is removed.
            - If yes, the comma is kept.
            You can override the behaviour by forcing the removal of the comma
            Returns found index in the enum_members list.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ScpiEnums._InitSpecialValues">
            <summary>
            Convert the members to the SCPI values - values to be sent to the instrument
            Resolves escapes:
            '^_' => ''
            '^_minus' => '-'
            '_dash_' => '-'
            '_dot_' => '.'
            '_cma_' => ','
            This method is used in convertors:
            ToScpiEnumList => converts response from the instrument to a List of enums members
            ScpiStringToEnumString => converts response from the instrument to an existing enum member as string
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.WaitForOpcMode">
            <summary>
            Defines OPC waiting mode used by Instrument
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.InstrOptionsParseMode.Skip">
            <summary>
            No options reading / parsing / applying
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.InstrOptionsParseMode.KeepOriginal">
            <summary>
            No parsing, just trimming white spaces
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.InstrOptionsParseMode.KeepBeforeDash">
            <summary>
            If dash is present, only the the part before dash is kept e.g. 'K200-FSH' => 'K200'
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.InstrOptionsParseMode.KeepAfterDash">
            <summary>
            If dash is present, only the part after dash is kept e.g. 'SMU200-K1' => 'K1'
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.InstrOptionsParseMode.Auto">
            <summary>
            Parses the option automatically - takes the portion before or after dash depending on sucessfull parsing K/B
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.SessionSettings">
            <summary>
            Defines session-specific settings used by the Instrument class
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.WriteDelay">
            <summary>
            Delay before each Write (not valid for segmented writes)
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.ReadDelay">
            <summary>
            Delay before each Read (not valid for segmented reads)
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.PerformVisaClear">
            <summary>
            If true, the code performs viClear() after viOpen
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.IoSegmentSize">
            <summary>
            Maximum read/write segment size when communicating with the instrument
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.OpcTimeout">
            <summary>
            OPC timeout in milliseconds for all write/read with OPC sync operations
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.VisaTimeout">
            <summary>
            VISA timeout in milliseconds for all VISA operations
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.PreferRsVisa">
            <summary>
            If true, RS VISA is preferred. If false, System Default VISA is chosen
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.SelectVisa">
            <summary>
            If non-null, the custom VISA plugin is selected
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.SelfTestTimeout">
            <summary>
            Timeout for Self-test procedure
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.OptionsParseMode">
            <summary>
            Parsing mode for the *OPT? response
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.IdnModelFullName">
            <summary>
            If true, the instrument Model has the full *IDN? query name (e.g. "NRP2").
            If false, the name has only the A-Z prefix (e.g. "NRP") </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.LoggingEnabled">
            <summary>
            If true, the IO communication logging is enabled
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.LoggingDebug">
            <summary>
            If true, the IO communication logging has more detailed format including source code lines
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.LoggingMaxAsciiEntryLength">
            <summary>
            Maximal length of an ASCII IO communication logging entry until the middle part is truncated
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.LoggingMaxBinEntryLength">
            <summary>
            Maximal length of a binary IO communication logging entry until the middle part is truncated
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.BinFloatNumbersFormat">
            <summary>
            Defines binary data coding of instrument's floating-point numbers - used by all methods that decode binary data to an array of floating-point numbers.
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.BinIntNumbersFormat">
            <summary>
            Defines binary data coding of instrument's integer numbers - used by all methods that decode binary data to an array of integer numbers.
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.ReadStbVisaTimeout">
            <summary>
            If >0, during STB polling sets the VISA Timeout to a this number to avoid long waiting times by some instruments (NRP-S/SN) sensors
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.OpcQueryAfterEachSetting">
            <summary>
            If true, each io.write is followed by a *OPC? query
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.QueryInstrumentStatus">
            <summary>
            If true, Checking of instrument status after each command is ON
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.SimulationIdnString">
            <summary>
            IDN string in simulation mode
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.SimulationOptString">
            <summary>
            OPT string in simulation mode
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.Simulate">
            <summary>
            Simulation mode ON/OFF
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.SupportedInstrModels">
            <summary>
            Forward-slash-separated list of the supported instrument models
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.SupportedIdnPatterns">
            <summary>
            Forward-slash-separated list of the Regexes evaluated against *IDN? response
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.OpcWaitMode">
            <summary>
            You can define the default OpcWaitMode.
            It might be coerced to OpcQuery, depending on the session kind
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.AddTermCharToWriteBinData">
            <summary>
            If true, writing of binary data to the instrument is appended by the TermChar.
            It might be coerced to TRUE, depending on the session kind
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.AssureWriteWithTc">
            <summary>
            If true, every write string is checked for the TermChar at the end. If the TermChar is missing, it is added.
            You can define the default AssureWriteWithTc value.
            It might be coerced to TRUE depending on the session kind
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.TermChar">
            <summary>
            Termination character for reading and writing. Default is LF
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.VxiCapable">
            <summary>
            You can define the default VxiCapable value.
            It might be coerced to FALSE, depending on the session kind
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.StbInErrorCheck">
            <summary>
            If TRUE (default), the error checking starts with *STB? query
            If FALSE, the error checking calls directly the SYST:ERR? query
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.DisableOpcQuery">
            <summary>
            If TRUE (default is FALSE), all the *OPC queries are skipped and simualate returning true
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.DisableStbQuery">
            <summary>
            If TRUE (default is FALSE), all the *STB? queries are disabled and simulate returning 0
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.SessionSettings.AssureResponseEndWithTc">
            <summary>
            If TRUE, each VISA read must end with TermChar. If not, the reading continues
            If FALSE, (default) the reading can end with any character
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.SkipStatusSystemSettings">
            <summary>
            If TRUE, the *ESE and *SRE registers are not set and the OPC Wait Mode is set to OpcQuery
            Default value is FALSE.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Creates the SessionSettings from the xml file, only applying the common settings
            </summary>
            <param name="xml"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.#ctor(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
            Creates the SessionSettings from the xml file, considering the specifics of the resourceName and sessionKind
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings._ApplyTokens(InstrumentDrivers.Internal.SessionSettings.Tokens)">
            <summary>
            Apply settings to Property fields.
            Also applies default values if the tokens are not present
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings._ParseFromXml(System.Xml.Linq.XElement,System.String,System.String,System.String)">
            <summary>
            Returns the tokens from the XML that fulfill the entered 'resourceName' and 'sessionKind'
            The tokens are created by accumulating all the settings in the order as they are defined,
            meaning the latest setting wins
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings._FulfillsCondition(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            Returns true, if the entered XML element or its ancestors fulfill the condition:
            attrName.Value == conditionValue
            If the attrName is not present, the condition is fulfilled
            If the conditionValue == null, the condition is fulfilled
            If the attrName is present, and the conditionValue is equal the attribute value (case-insensitive), the condition is fulfilled
            If the very first character is '!', the condition logic is inverted: attrName.Value != conditionValue
            If the start of the condition value is '[RE]', the matching switches to Regular Expression (case-insensitive).
            You can also use the combination of '![RE]'
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings._GetAllTokens(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Return accumulated tokens from all the entered config elements
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.SessionSettings.Tokens">
            <summary>
            Class holding dictionary of tokens: key = value
            If the key is repeated, the last value wins
            Provides:
            - bool IsDefined(key)
            - string GetValue(key)
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.#ctor(System.String)">
            <summary>
            Creates tokens from the string values. Separator: ','
            If a value is enclosed by single quotes, e.g. 'K20,K30', the separator is escaped.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Creates tokens from the attributes of an XML element
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.#ctor">
            <summary>
            Creates empty tokens
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.ToString">
            <summary>
            String representation of the class
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.SetStringValue(System.String,System.String)">
            <summary>
            Sets/Updates value of the token
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.Tokens.Names">
            <summary>
            Returns all the defined names
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.MergeWith(InstrumentDrivers.Internal.SessionSettings.Tokens)">
            <summary>
            Merges the entered tokens with higher priority
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.SessionSettings.Tokens.Count">
            <summary>
            Returns number of tokens in the dictionary
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens._ParseFromString(System.String)">
            <summary>
            Parses string into Tokens. Values of the repeated tokens are overwritten - the last one wins
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens._Parse(System.Xml.Linq.XElement)">
            <summary>
            Parses all the element attributes to tokens
            </summary>
            <param name="el"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.IsDefined(System.String)">
            <summary>
            Returns true, if the value is defines
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.GetStringValue(System.String,System.String)">
            <summary>
            Returns string token value or dflt if not found
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.GetIntValue(System.String,System.Int32)">
            <summary>
            Returns Integer token value or dflt if not found
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.GetBoolValue(System.String,System.Boolean)">
            <summary>
            Returns boolean token value or dflt if not found
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.GetEnumValue``1(System.String)">
            <summary>
            Returns Enum token value or exception if not found
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SessionSettings.Tokens.GetStringListValue(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns list of strings token value or dflt if not found
            String is split on comma ',' or forward slash '/'
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.ResourceManager.SessionsList">
            <summary>
            List of RmSessions=VisaSessions and SocketIo Objects
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.ResourceManager.LastError">
            <summary>
            Last error assigned to the session
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.ResourceManager.GetNewSessionHandle">
            <summary>
            Finds new Resource Manager and VISA session handle (starting from 1) and sets it up
            </summary>
            <returns></returns>
        </member>
        <member name="T:InstrumentDrivers.Internal.SocketIo">
            <summary>
            Class implementing the exact VISA APIs for the message based communication
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SocketIo.SetLastError(System.Int32,System.String)">
            <summary>
            Sets last error for the session
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SocketIo.GetLastError(System.Int32)">
            <summary>
            Gets and clears last error for the session
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SocketIo.viClose(System.Int32)">
            <summary>
            Closes and disposes of the session
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.SocketIo.viGetAttribute(System.Int32,System.UInt32,System.Text.StringBuilder)">
            <summary>
            String type attributes reading
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.SocketInstrException.IpAddress">
            <summary>
            Server IP Address
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.SocketInstrException.Port">
            <summary>
            Server Port number
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaSocket">
            <summary>
            VISA Socket class as an extension of the base Socket
            Provides:
            - Connect()
            - Disconnect()
            - Write()
            - Read()
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSocket.IpAddress">
            <summary>
            Server IP Address
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSocket.Port">
            <summary>
            Server Port number
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSocket.TermChar">
            <summary>
            Read Termination character
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSocket.TermCharEnable">
            <summary>
            Read Termination character enable
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSocket.#ctor(System.Char)">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSocket.#ctor(System.String,System.Int32,System.Char)">
            <summary>
            Constructor with IP Address and port
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSocket.Connect">
            <summary>
            Initialize connection
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSocket._Throw(System.String)">
            <summary>
            Internal handling of exceptions
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSocket.Write(System.Byte[],System.Int32)">
            <summary>
            Write bytes
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSocket.Read(System.Byte[],System.Int32,System.Boolean@)">
            <summary>
            Read bytes
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSocket.Timeout">
            <summary>
            Set timeout - write and receive
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSocket.Disconnect">
            <summary>
            Disconnects the session
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSocket.Finalize">
            <summary>
            When cought by the garbage collector, dispose automatically
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.StreamLogger">
            <summary>
            This class implements the general stream logging
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.StreamLogger._loggers">
            <summary>
            List of streams
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.StreamLogger._stopWatch">
            <summary>
            Timer for measuring the durations
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.StreamLogger._blocking">
            <summary>
            Logging blocker.
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.StreamLogger._previousLoggedLine">
            <summary>
            Last line source logged
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.StreamLogger.MaxBinEntryLength">
            <summary>
            Maximum size of the binary data before they are truncated
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.StreamLogger.MaxAsciiEntryLength">
            <summary>
            Maximum size of the ASCII data before they are truncated
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.StreamLogger._loggingLastLineTime">
            <summary>
            Last line source logged
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.StreamLogger.LoggingEnabled">
            <summary>
            This sets or gets logging state
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.StreamLogger.LoggingDebugEnabled">
            <summary>
            This sets or gets logging with source state
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger.#ctor">
            <summary>
            Constructor for the Logger class
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger._ComposeLogString(System.String,System.String)">
            <summary>
            Creates new log line with time stamp and the info / log message
            </summary>
            <param name="infoMessage"></param>
            <param name="logMessage"></param>
            <returns></returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger._ResponseStringToLogEntry(System.String)">
            <summary>
            Replaces the white-space characters with escape characters and truncates the response to a maximum of _maxAsciiDataSize (2048) bytes
            </summary>
            <param name="response">Response to correct</param>
            <returns>Corrected response</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger.BlockNextLogEntry">
            <summary>
            Blocks the next Log/LogBinaryData entry
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger.Add(System.IO.Stream)">
            <summary>
            Add new StreamWriter listener
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger.Remove(System.IO.Stream)">
            <summary>
            Remove StreamWriter listener
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger.TimerStart">
            <summary>
            Starts the timer what will be later used  by the Log() method for calculating the duration
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger.Log(System.String,System.String,System.String)">
            <summary>
            Logging of a query or read: "sent -> received" or "-> received" with the received string adjusted
            </summary>
            <param name="infoMessage"></param>
            <param name="sent">Sent command/query</param>
            <param name="received">Response</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger.Log(System.String,System.String,System.Int32,System.String)">
            <summary>
            Logging of an array query: "sent -> Size %d: received" with the received string adjusted
            </summary>
            <param name="infoMessage"></param>
            <param name="sent">Sent command/query</param>
            <param name="size">Response size or number of array elements</param>
            <param name="received">Response</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger.LogBinaryData(System.String,System.String,System.Byte[])">
            <summary>
            Writes a binary data to all log streams in hexadecimal format
            </summary>
            <param name="infoMessage">Specifies the type of message, usually "viWrite" or "viRead"</param>
            <param name="sent">Sent command/query</param>
            <param name="binaryData">Binary data</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.StreamLogger.Log(System.String,System.String)">
            <summary>
            Writes a message to all log streams
            </summary>
            <param name="infoMessage">Specifies the type of message, usually "viWrite" or "viRead"</param>
            <param name="logMessage">Logging message</param>
        </member>
        <member name="T:InstrumentDrivers.Internal.Tokens">
            <summary>
            Class holding dictionary of tokens: key = value
            If the key is repeated, the last value wins
            Provides:
            - bool IsDefined(key)
            - string GetValue(key)
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.#ctor(System.String)">
            <summary>
            Creates tokens from the string values. Separator: ','
            If a value is enclosed by single quotes, e.g. 'K20,K30', the separator is escaped.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Creates tokens from the attributes of an XML element
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.#ctor">
            <summary>
            Creates empty tokens
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.ToString">
            <summary>
            String representation of the class
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.SetStringValue(System.String,System.String)">
            <summary>
            Sets/Updates value of the token
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Tokens.Names">
            <summary>
            Returns all the defined names
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.MergeWith(InstrumentDrivers.Internal.Tokens)">
            <summary>
            Merges the entered tokens with higher priority
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Tokens.Count">
            <summary>
            Returns number of tokens in the dictionary
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens._ParseFromString(System.String)">
            <summary>
            Parses string into Tokens. Values of the repeated tokens are overwritten - the last one wins
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens._Parse(System.Xml.Linq.XElement)">
            <summary>
            Parses all the element attributes to tokens
            </summary>
            <param name="el"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.IsDefined(System.String)">
            <summary>
            Returns true, if the value is defines
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.GetStringValue(System.String,System.String)">
            <summary>
            Returns string token value or dflt if not found
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.GetIntValue(System.String,System.Nullable{System.Int32})">
            <summary>
            Returns Integer token value or dflt if not found
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.GetBoolValue(System.String,System.Nullable{System.Boolean})">
            <summary>
            Returns Integer token value or dflt if not found
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.GetEnumValue``1(System.String)">
            <summary>
            Returns Enum token value or exception if not found
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Tokens.GetStringListValue(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Returns list of strings token value or dflt if not found
            String is split on comma ',' or forward slash '/'
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.StringExtensionMethods">
            <summary>
            Extension methods for string class
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.StringExtensionMethods.TrimStringMode">
            <summary>
            Trimming mode:
            WhiteCharsAllQuotes: Remove white chars and all quotes,
            WhiteCharsSingleQuotes: Remove white chars and single quotes
            WhiteCharsSingleQuotes: Remove white chars and double quotes
            WhiteCharsOnly: Remove white chars only - same as String.Trim() method
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.StringExtensionMethods.TrimStringResponse(System.String,InstrumentDrivers.Internal.StringExtensionMethods.TrimStringMode)">
            <summary>
            Trims instrument string response.
            In modes WhiteCharsAllQuotes,WhiteCharsSingleQuotes,WhiteCharsDoubleQuotes:
            All the symmetrical leading and trailing quotation marks are trimmed,
            but only if there are none in the remaining text.
            </summary>
            <param name="text">Text to trim</param>
            <param name="mode">Trimming mode</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.StringExtensionMethods.ParseNameValueToken(System.String,System.String@,System.String@)">
            <summary>
            Parses a string in a form "keyName = keyValue"
            Returns 1, if no '=' is found.
            Returns 2, if one or more '=' is found, the string is split on the first '='
            returns 0, if the string is empty
            </summary>
            <param name="text">Text to parse</param>
            <param name="keyName">Returned Key Name</param>
            <param name="keyValue">Returned Key Value</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.StringExtensionMethods.AddToken(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            Adds/Replaces token to dictionary: key = value
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.StringExtensionMethods.EndsWithTc(System.String,System.Char)">
            <summary>
            The fastest way to check whether a string ends with a certain character
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.StringExtensionMethods.ContainsQuestionMark(System.String)">
            <summary>
            The fastest way to check whether a string contains Question-mark
            </summary>
            <param name="text"></param>
        </member>
        <member name="T:InstrumentDrivers.Internal.RsDrvFormat">
            <summary>
            Conversion methods between string - double - boolean - integer values
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.#cctor">
            <summary>
            Constructor of the static class
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToBoolean(System.String)">
            <summary>
            Converts string to boolean
            </summary>
            <param name="value"></param>
            <returns>true or false boolean value</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.SpecialValuesToDouble(System.String,System.Double@)">
            <summary>
            Returns special value as Double
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.StripSpecialSuffixes(System.String,System.String@,System.Double@)">
            <summary>
            Tries to find defined suffixes in the text and returns the stripped text and the multiplier as double number.
            If no known suffix is detected, the method returns false, strippedText=text, multiplier=1.0
            Example: text='123 MHz' strippedText='123' multiplier=1E6
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat._tryParseToDouble(System.String,System.Double@)">
            <summary>
            wrapper for double.tryParse()
            In .NET 4.8 the TryParse returns false for numbers that exceed the double range
            In .NET Core, the TryParse return true, and the value is Positive or Negative Infinity
            Unify the behaviour like in the .NET Core
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToDouble(System.String,System.Nullable{System.Double})">
            <summary>
            Converts string to Double value. Also recognizes case-insensitive "NAN", "+Inf", "-Inf"
            If you provide defValue, any parsing exception is suppressed and the method returns that defValue
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToDoubleExtString(System.Double)">
            <summary>
            Converts the extended double to scpi string
            Works as the double.ToDoubleString(), but consideres special strings defined in the _specialDoubleExtValStrLookup
            For example, the string "OFF" is converted to the -double.Epsilon
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToSingleFloat(System.String,System.Nullable{System.Single})">
            <summary>
            Converts string to single-float value. Also recognizes case-insensitive "NAN", "+Inf", "-Inf"
            If you provide defValue, any parsing exception is suppressed and the method returns that defValue
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.SpecialValuesToInt32(System.String,System.Int32@)">
            <summary>
            Returns special value as Int32
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToInt32(System.String,System.Nullable{System.Int32})">
            <summary>
            Converts string to Int32 value.
            Also recognizes special text values
            If you provide defValue, any parsing exception is suppressed and the method returns that defValue
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToInt32ExtString(System.Int32)">
            <summary>
            Converts the extended integer to scpi string
            Works as the int32.ToString(), but consideres special strings defined in the _specialIntExtValStrLookup
            For example, the string "OFF" is converted to the int.MinValue+1
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.SpecialValuesToInt64(System.String,System.Int64@)">
            <summary>
            Returns special value as Int64
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToInt64(System.String,System.Nullable{System.Int64})">
            <summary>
            Converts string to Int64 value.
            Also recognizes case-insensitive "NAN"(=Int64.MinValue), "+Inf"(=Int64.MaxValue), "-Inf"(=Int64.MinValue)
            If you provide defValue, any parsing exception is suppressed and the method returns that defValue
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToDoubleString(System.Double)">
            <summary>
            Converts double number to string using {0:g} formatter
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToSingleFloatString(System.Single)">
            <summary>
            Converts float number to string using {0:g} formatter
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToBooleanString(System.Boolean)">
            <summary>
            Converts Boolean to string using ? "ON" : "OFF"
            </summary>
            <param name="number">boolean to convert to string</param>
            <returns>Converted boolean as "ON" / "OFF" string</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvQuotesString(System.String[])">
            <summary>
            Converts array of strings to string. Each element is assured to be enclosed by single quotes
            </summary>
            <returns>Converted array of strings to string</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvString(System.String[])">
            <summary>
            Converts array of strings to string. Separed by the commas
            </summary>
            <returns>Converted array of strings to string</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvString(System.Int32[])">
            <summary>
            Converts array of integers to string
            </summary>
            <returns>Converted array of integers to string</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvString(System.Boolean[])">
            <summary>
            Converts array of booleans to string
            </summary>
            <returns>Converted array of booleans to string</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvString(System.Double[])">
            <summary>
            Converts array of doubles to string
            </summary>
            <returns>Converted array of doubles to string</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToDoubleArray(System.String,System.Nullable{System.Double})">
            <summary>
            Converts string with comma-separated values to array of Doubles
            If you provide defValue, any parsing exception is suppressed and the method returns that defValue
            Also recognizes case-insensitive "NAN", "+Inf", "-Inf"
            If the text is null or empty, the method returns array with 0-length
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToSingleFloatArray(System.String,System.Nullable{System.Single})">
            <summary>
            Converts string with comma-separated values to array of Single Floats
            If you provide defValue, any parsing exception is suppressed and the method returns that defValue
            Also recognizes case-insensitive "NAN", "+Inf", "-Inf"
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToInt32Array(System.String,System.Nullable{System.Int32})">
            <summary>
            Converts string with comma-separated values to array of int values.
            Also recognizes case-insensitive "NAN"(=Int32.MinValue), "+Inf"(=Int32.MaxValue), "-Inf"(=Int32.MinValue)
            If you provide defValue, any parsing exception is suppressed and the method returns that defValue.
            If the text is null or empty, the method returns array with 0-length
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToInt64Array(System.String,System.Nullable{System.Int64})">
            <summary>
            Converts string with comma-separated values to array of int64 values.
            Also recognizes case-insensitive "NAN"(=Int64.MinValue), "+Inf"(=Int64.MaxValue), "-Inf"(=Int64.MinValue)
            If you provide defValue, any parsing exception is suppressed and the method returns that defValue.
            If the text is null or empty, the method returns array with 0-length
            </summary>
            <param name="text">Text to convert</param>
            <param name="defValue">Default value. None if not entered</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToBooleanArray(System.String)">
            <summary>
            Converts string with comma-separated values to array of Booleans
            </summary>
            <param name="text">Text to convert</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToBoolList(System.ArraySegment{System.String})">
            <summary>
            Converts string array segment to a list of Booleans
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToInt32List(System.ArraySegment{System.String})">
            <summary>
            Converts string array segment to a list of Integers
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToStringList(System.ArraySegment{System.String})">
            <summary>
            Converts string array segment to a list of Strings - paired quotes are removed
            </summary>
            <param name="segment"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ClearEmptySingleString(System.Collections.Generic.List{System.String})">
            <summary>
            Returns an empty list if the input list contains only one item with an empty string.
            Otherwise returns the unchanged list.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.EncloseByQuotes(System.String)">
            <summary>
            Returns entered text enclosed by single quotes
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvString(System.Collections.Generic.List{System.String})">
            <summary>
            Returns entered list joined by comma. Each element is enclosed by single quotes
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToStringList(System.String[])">
            <summary>
            Returns entered array joined by comma.
            Each element is trimmed for paired quotes and trailing spaces
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvRawString(System.Collections.Generic.List{System.String})">
            <summary>
            Returns entered list joined by comma. No changes to the items
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvString(System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns entered list of integers joined by comma. No changes to the items
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvString(System.Collections.Generic.List{System.Int64})">
            <summary>
            Returns entered list of integer64s joined by comma. No changes to the items
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.IntExtToCsvString(System.Collections.Generic.List{System.Int32})">
            <summary>
            Returns entered list joined by comma. No changes to the items, consideres special integer values
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvString(System.Collections.Generic.List{System.Boolean})">
            <summary>
            Returns entered bool list 0/1 joined by comma
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToCsvString(System.Collections.Generic.List{System.Double})">
            <summary>
            Returns entered double list joined by comma
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.DoubleExtToCsvString(System.Collections.Generic.List{System.Double})">
            <summary>
            Returns entered double list joined by comma, consideres special double values
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.PassFailToTrueFalse(System.String)">
            <summary>
            Converts string Pass/Fail to boolean True/False, case-insensitive.
            </summary>
            <param name="value">Pass/Fail string</param>
            <returns>true for "Pass" / "Passed", false for "Fail" / "Failed"</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToSingleFloat32Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 4 Bytes/Number array of Single Floats.
            The array is returned as float[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Double array of float32 numbers</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToFloat32Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 4 Bytes/Number array of Doubles.
            The array is returned as double[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Double array of float32 numbers</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToDouble64Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 8 Bytes/Number array of Doubles.
            The array is returned as double[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Double array of double64 numbers</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToInt32Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 4 Bytes/Number array of Integers.
            The array is returned as int32[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Integer array of int32 numbers</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToInt16Array(System.Byte[],System.Boolean)">
            <summary>
            Converts Binary data byte[] to 2 Bytes/Number array of Integers.
            The array is returned as int32[] type
            </summary>
            <param name="data">Input binary data to convert</param>
            <param name="swapEndianness">If false, keeps the endianness as it is. If true, swaps the endianness</param>
            <returns>Integer array of int16 numbers</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToArrayOfFloatNumbers(System.Byte[],RohdeSchwarz.RsInstrument.InstrBinaryFloatNumbersFormat)">
            <summary>
            Decodes binary data to an array of floating-point numbers based on the entered format
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToArrayOfFloatNumbers(System.Byte[],System.Boolean,RohdeSchwarz.RsInstrument.InstrBinaryFloatNumbersFormat)">
            <summary>
            Converts to double float array from the byte[] array either as binary or as ascii data
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToArrayOfSingleFloatNumbers(System.Byte[],RohdeSchwarz.RsInstrument.InstrBinaryFloatNumbersFormat)">
            <summary>
            Decodes binary data to an array of floating-point numbers single precision based on the entered format.
            The formats Double8Bytes and Double8BytesSwapped are not allowed
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToArrayOfSingleFloatNumbers(System.Byte[],System.Boolean,RohdeSchwarz.RsInstrument.InstrBinaryFloatNumbersFormat)">
            <summary>
            Converts to single float array from the byte[] array either as binary or as ascii data
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToArrayOfIntegerNumbers(System.Byte[],RohdeSchwarz.RsInstrument.InstrBinaryIntegerNumbersFormat)">
            <summary>
            Decodes binary data to an array of integer numbers based on the entered format
            </summary>
            <param name="data">Binary data</param>
            <param name="binaryIntegerNumbersFormat">Format in which the data is to be parsed</param>
            <returns>Array of decoded integer numbers always returned as int32</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.RsDrvFormat.ToArrayOfIntegerNumbers(System.Byte[],System.Boolean,RohdeSchwarz.RsInstrument.InstrBinaryIntegerNumbersFormat)">
            <summary>
            Converts to int32 array from the byte[] array either as binary or as ascii data
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.Visa">
            <summary>
            VISA basic class. Uses delegates from VISA-C, which can be set to a custom implementation
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.Visa._visaC">
            <summary>
            VisaC object
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.Visa._buffer">
            <summary>
            Buffer for reading from instrument
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.Timeout">
            <summary>
            VISA timeout in milliseconds
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.ReadTermCharEnabled">
            <summary>
            Enable termination character when Reading
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.ReadTermChar">
            <summary>
            Define termination character when Reading
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.SendEndEnable">
            <summary>
            Send End Enable when Writing
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.SerialSendEndIn">
            <summary>
            Serial Port Send End In
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.SerialSendEndOut">
            <summary>
            Serial Port Send End Out
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.IsHislip">
            <summary>
            Checks whether the TCPIP session is HiSLIP
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.ReadBufferSize">
            <summary>
            Size of the internal buffer used for all read operations
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.Session">
            <summary>
            VISA Handle object
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.VisaManufacturer">
            <summary>
            VISA Manufacturer string
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.Visa.VisaDllName">
            <summary>
            Returns used VISA name including bittness
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.#ctor(System.String,System.Byte[],System.String,System.Boolean)">
            <summary>
            Constructor for the VISA object
            </summary>
            <param name="resourceName">Standard VISA Resource name or an alias name</param>
            <param name="directSession">If you provide a non-null number, the session is reused</param>
            <param name="visaPlugin">If non-null, you can use a custom VISA API implementation. Has priority over resourceName plugin</param>
            <param name="simulating">If true, the Visa object is in simulation mode</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.ToString">
            <summary>
            String representation of the object: "Visa {manufacturer}, {ResourceClass}, '{resource name}'"
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa._GetVISAStatusDesc(System.Int32)">
            <summary>
            Converts the status code into human-readable message
            </summary>
            <param name="status">Status code from VISA functions</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa._ThrowOnError(System.Int32,System.String)">
            <summary>
            Error handler for all the VISA IOException()
            </summary>
            <param name="status">Return value from VISA functions</param>
            <param name="context">Additional optional text</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa._MoreDataIsAvailable(System.Int32)">
            <summary>
            Returns true, if entered status code indicates that more data might be available
            </summary>
            <param name="status"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.ReadToStream(System.IO.Stream,System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Read bytes to Stream
            </summary>
            <param name="stream">Stream to read to</param>
            <param name="count">Number of bytes to read</param>
            <param name="moreDataAvailable">Returns true, if more data for reading is available</param>
            <param name="assureResponseEndWithTc">If true, each VISA read must end with TermChar. If not, the reading continues</param>
            <returns>Number of bytes actually read</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.WriteFromStream(System.IO.Stream,System.Int32)">
            <summary>
            Writes bytes from Stream
            </summary>
            <param name="stream">Stream to write from</param>
            <param name="count">Bytes count to write</param>
            <returns>Bytes count actually written</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa._GetAttributeInt(System.UInt32)">
            <summary>
            Get Attribute of Int32 type
            </summary>
            <param name="attributeId"></param>
            <returns>value of the attribute</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa._SetAttributeInt(System.UInt32,System.Int32)">
            <summary>
            Set Attribute of Int32 type
            </summary>
            <param name="attributeId"></param>
            <param name="value"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa._GetAttributeString(System.UInt32)">
            <summary>
            Get Attribute of string type
            </summary>
            <param name="attributeId"></param>
            <returns>value of the attribute</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.Finalize">
            <summary>
            When cought by the garbage collector, dispose automatically
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.Close">
            <summary>
            Close the resource manager and the visa session
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.Clear">
            <summary>
            Calling viClear() method
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.Write(System.String)">
            <summary>
            Write text to instrument
            </summary>
            <param name="text">text to write</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.Write(System.Byte[])">
            <summary>
            Write binary buffer to instrument
            </summary>
            <param name="buffer">binary buffer to write</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.Read(System.Int32,System.Boolean@,System.Boolean,System.Int32@)">
            <summary>
            Reads data from instrument with defined maximum length.
            The maxLength value cannot exceed the _buffer.Length
            </summary>
            <param name="maxLength">Maximum data length to read</param>
            <param name="moreDataAvailable">Returns true, if more data for reading is available</param>
            <param name="assureResponseEndWithTc">If true, each VISA read must end with TermChar. If not, the reading continues</param>
            <param name="readCount">Number of bytes actually read</param>
            <returns>Data as Byte array</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.ReadString(System.Int32,System.Boolean@,System.Boolean,System.Int32@)">
            <summary>
            Reads data as string from instrument with defined maximum length.
            The maxLength value cannot exceed the _buffer.Length
            </summary>
            <param name="maxLength">Maximum string length to read</param>
            <param name="moreDataAvailable">Returns true, if more data for reading is available</param>
            <param name="assureResponseEndWithTc">If true, each VISA read must end with TermChar. If not, the reading continues</param>
            <param name="readCount">Number of characters actually read</param>
            <returns>Read data as string</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.ReadChar">
            <summary>
            Reads single character
            </summary>
            <returns>read character</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.ReadUpToChar(System.Char,System.Int32)">
            <summary>
            Reads up to a specified ASCII character, and returns the string before
            </summary>
            <param name="c">character to stop the reading</param>
            <param name="maxCount">Maximum characters to read. The reading stops if it reached the desired character, maxCount, or end of message</param>
            <returns>String before the c</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.ReadStb">
            <summary>
            Reads Status Byte using viReadSTB()
            </summary>
            <returns>STatus Byte value</returns>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.SetGpibControlREN(System.UInt32)">
            <summary>
            Sets the GPIB REN line value. 
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.EnableSrqEvent(InstrumentDrivers.Internal.VisaConstants.EventMechanism)">
            <summary>
            Enables Service Request Event
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.DisableSrqEvent(InstrumentDrivers.Internal.VisaConstants.EventMechanism)">
            <summary>
            Disables Service Request Event
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.DiscardAllEnabledEvents(InstrumentDrivers.Internal.VisaConstants.EventMechanism)">
            <summary>
            Flushes all the existing events
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.DiscardAllSrqEvents(InstrumentDrivers.Internal.VisaConstants.EventMechanism)">
            <summary>
            Flushes all the existing SRQ events
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa._InstallSrqHandler(InstrumentDrivers.Internal.VisaC.EventHandler)">
            <summary>
            Installs SRQ handler
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa._UninstallSrqHandler(InstrumentDrivers.Internal.VisaC.EventHandler)">
            <summary>
            Uninstalls SRQ handler
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.WaitOnSrqEvent(System.Int32,System.Boolean)">
            <summary>
            Waits on Service Request Event.
            If a timeout occurs, the method returns true
            </summary>
            <param name="timeoutMs">timeout for waiting on the SRQ event</param>
            <param name="disableAfterwards">If true, the DisableSrqEvent() is called afterwards</param>
            <returns>True, if timeout occurred</returns>
        </member>
        <member name="F:InstrumentDrivers.Internal.Visa._installedVisaCsrqHandler">
            <summary>
            Keeps the SRQ installed handler reference
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.InstallSrqVisaChandler(System.EventHandler{RohdeSchwarz.RsInstrument.InstrEventArgs})">
            <summary>
            Public method to install a new srq handler.
            Visa-C SRQ handler is always only one method (SrqHandler), which serves as a router for other C#-like event 'handler'
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.Visa.UninstallSrqVisaChandler">
            <summary>
            Public method to uninstall VISA-C srq handler.
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaConstants">
            <summary>
            Constants used in all the VISA implementations
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaConstants.VisaEventType">
            <summary>
            Indicates the type of a VISA.NET event.
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.VisaConstants.ViAttrTmoValue">
            <summary>
            This is attribute names for function viSetAttribute and viGetAttribute
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaC">
            <summary>
            VISA-C wrapper, provides delegates for all the required methods
            Resolves 32-bit and 64-bit libraries, and RohdeSchwarz VISA preference
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaC.SelectedPlugin">
            <summary>
            Returns the currently selected VISA plugin
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaC.VisaDllName">
            <summary>
            Returns loaded VISA library name
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaC.#ctor(InstrumentDrivers.Internal.VisaPlugin)">
            <summary>
            Prepares native VISA to use
            If plugin is non-null, the VISA plugin is used instead of the VISA implementation
            This allows for no underlying VISA-C installation
            Supported plugins:
            - NativeVisa (default)
            - RsVisa - force RsVisa use. If not found, throw exception
            - PreferRsVisa - prefer RsVisa use. If not found, switch to NativeVisa
            - SocketIo
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaC.RsVisaExist">
            <summary>
            Returns true, if the RsVisa is available (installed)
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaC.SelectNativeVisa">
            <summary>
            Selects VisaNative assembly either 32-bit or 64-bit
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaC.SelectRsVisa">
            <summary>
            Selects RsVisa assembly
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaC.StringToPlugin(System.String)">
            <summary>
            Converts Visa plugin string to the plugin enum
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaC.VisaNative32">
            <summary>
            Wrapper for C - based Default VISA 32-bit
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.VisaC.VisaNative32.VisaDllName">
            <summary>
            VISA-C handler prototype
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaC.VisaNative64">
            <summary>
            Wrapper for C - based Default VISA 64-bit
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.VisaC.VisaNative64.VisaDllName">
            <summary>
            VISA-C handler prototype
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaC.RsVisaNative">
            <summary>
            Wrapper for C - based RohdeSchwarz Visa 32/64-bit
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.VisaC.RsVisaNative.VisaDllName">
            <summary>
            VISA-C handler prototype
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.DllResolver">
            <summary>
            Resolves names of the dlls depending on the run-time OS.
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.DllResolver.loadedLibraryName">
            <summary>
            Actual library loaded
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.DllResolver._LoadWithFallbacks(System.Collections.Generic.List{System.String},System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
            <summary>
            Tries to load the assemblies in the order from the libNames list.
            Returns the first successfully loaded one.
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaResourceManager">
            <summary>
            Visa Resource Manager
            Provides:
            - FindResources()
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaResourceManager.Handle">
            <summary>
            Resource Manager handle
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaResourceManager.Visac">
            <summary>
            Visa Plugin
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaResourceManager.VisaManufacturer">
            <summary>
            Visa Manufacturer String
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaResourceManager.Valid">
            <summary>
            Resource Manager is valid
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaResourceManager.#ctor(System.String,InstrumentDrivers.Internal.VisaC)">
            <summary>
            Standard Resource Manager
            </summary>
            <param name="resourceName"></param>
            <param name="visaC"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaResourceManager.#ctor(System.String,System.String)">
            <summary>
            Simulation Resource Manager
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaResourceManager.#ctor(System.String,InstrumentDrivers.Internal.VisaC,System.Int32)">
            <summary>
            Direct Resource Manager, already openened
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaResourceManager.Open">
            <summary>
            Opens the resource Manager and sets the:
            - Handle
            - VisaManufacturer
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaResourceManager.Close">
            <summary>
            Closes the Resource Manager
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaResourceManager._ThrowOnError(System.Int32,System.String)">
            <summary>
            Error handler for all the VISA Exceptions
            </summary>
            <param name="status">Return value from VISA functions</param>
            <param name="context">Additional optional text</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaResourceManager.SetHandle(System.Int32)">
            <summary>
            Sets new RmHandle
            </summary>
            <param name="handle"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaResourceManager._GetVISAStatusDesc(System.Int32)">
            <summary>
            Converts the status code into human-readable message
            </summary>
            <param name="status">Status code from VISA functions</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaResourceManager._GetVisaManufacturer">
            <summary>
            Returns VISA manufacturer of the current Resource Manager
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaResourceManager.FindResources(System.String,System.Boolean,System.Boolean)">
            <summary>
            Find all the resources fitting the search expression
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSession.FirsReadLen">
            <summary>
            First read length - for NRP-Z session it is the full ReadBufferSize of 1E6 Bytes
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSession.NextReadChunkLen">
            <summary>
            Next read length - for NRP-Z session it is equal to 1E6 Bytes
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaSession.SessionKind">
            <summary>
            Session type constructed from the VISA interfaceType and ResourceClass parameters
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaSession.EventStatusRegister">
            <summary>
            Event Status Register flags. Only the ones actually used (OPC flag) are defined here.
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSession.ReadSegmentHandler">
            <summary>
            Event handler for segmented transfer
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSession.OpcTimeout">
            <summary>
            Timeout for all the OPC-sync operations
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSession.FastSweep">
            <summary>
            If true, start of a OPC-synced operation uses viReadStb instead if *STB?
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSession.SessionType">
            <summary>
            Type of the VISA session
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSession.EventsHandler">
            <summary>
            External events handler for all the VISA events
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSession.AssureResponseEndWithTc">
            <summary>
            If set to true (default value), each VISA read must end with TermChar. If not, the reading continues
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.#ctor(System.String,System.Byte[],System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Constructor for the VisaSession
            </summary>
            <param name="resourceName"></param>
            <param name="directSession">If you provide a non-null number, the session is reused.</param>
            <param name="xmlSettings">XML-style settings to be used for the session</param>
            <param name="visaPlugin">If non-null, you can use a custom VISA API implementation</param>
            <param name="simulating">If true, the Visa object is in simulation mode.</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.ToString">
            <summary>
            String representation of the object: "Instrument {vendor}, {Session Kind}, '{resource name}'"
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._GetSessionKind">
            <summary>
            Returns session type
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._ResolveOpcTimeout(System.Nullable{System.Int32})">
            <summary>
            Returns integer value of OpcTimeoutMs property, if the input nullable value is null, 0, or less than 0.
            Otherwise returns the input value.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._DelayBeforeWrite">
            <summary>
            Delay Writing by defined number of milliseconds
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._DelayBeforeRead">
            <summary>
            Delay Reading by defined number of milliseconds
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._SetRegistersEseSre(InstrumentDrivers.Internal.WaitForOpcMode)">
            <summary>
            Sets the ESE and SRE registers based on the entered WaitForOpcMode
            Returns coerced WaitForOpcMode
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._FlushJunkData(System.Boolean)">
            <summary>
            Reads junk bytes to clear the instrument's output buffer.
            If totalFlush is true, the method tries to completely flush the data. If false, after several reads it throws exception
            </summary>
            <param name="totalFlush"></param>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._ParseBinaryDataHeader(System.Boolean,System.String@,InstrumentDrivers.Internal.VisaSession.ReadDataType@)">
            <summary>
            Parses the binary data and returns the expected length of the following data
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._ReadDataUnknownLengthToStream(System.IO.Stream,System.Int32,System.Boolean,System.Nullable{System.DateTime})">
            <summary>
            Segmented reading of unknown-length data into a Stream.
            For Socket and Serial interfaces this method only works if the ReadTermCharacterEnabled is True
            Enter the startTime if you already have read some data into the stream, otherwise the method creates its own start time
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._ReadDataKnownLengthToStream(System.IO.Stream,System.Int64,System.Int32)">
            <summary>
            Segmented reading of known-length data into a Stream. Maximum size of the data is Int32.MaxValue
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._InvokeReadSegmentEvent(System.DateTime,System.Int32,System.Int32,System.Int64,System.Boolean,System.Int64,System.Int64,System.IO.Stream)">
            <summary>
            If any ReadSegmentHandler is registered, this method calls that handler
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._InvokeWriteSegmentEvent(System.DateTime,System.Int32,System.Int32,System.Boolean,System.Int64,System.Int64)">
            <summary>
            If any SegmentTransferHandler is registered, this method calls that handler
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._ReadString(System.Int32,System.Boolean@)">
            <summary>
            Read string from instrument with maximum defined length.
            The maxLength value cannot exceed the VISA's _buffer.Length (100kB)
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._ReadStringUnknownLength">
            <summary>
            Reads string from instrument with unlimited length trimmed for trailing TermChars
            The read is performed in two steps to optimize memory use:
            The First read is performed with the fixed size of 1024 bytes.
            The Second read is then performed with 64kB segments, until all the data are read out.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._QueryStb">
            <summary>
            Sends *STB? query and reads the result
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._ReadStb(System.Boolean)">
            <summary>
            Reads viReadSTB and casts it to the StatusByte type
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._WriteAndPollStbVxi(System.String,System.Boolean,System.Int32,RohdeSchwarz.RsInstrument.StatusByte)">
            <summary>
            Reads Status Byte Register and ends if the ESB bit (5) is set to 1.
            This method also works with the SOCKET and SERIAL interface by sending *STB? query.
            In that case however, command cannot be a query.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._WriteAndPollStbNonVxi(System.String,System.Int32,RohdeSchwarz.RsInstrument.StatusByte)">
            <summary>
            Queries Status Byte Register (*STB?) and ends if the ESB bit (5) is set to 1.
            The command must not be a query. This method also works with the SOCKET and SERIAL interface.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._PollingDelay(System.DateTime)">
            <summary>
            Generates progressive polling delay
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._CheckMessageAvailableAfterOpc(RohdeSchwarz.RsInstrument.StatusByte,System.String,System.Int32,System.String)">
            <summary>
            Used internally after _StbPolling() to check if the message is available
            Throws an exception in case of MAV not available
            </summary>
            <param name="stb">Last read STB</param>
            <param name="query">Sent query - only for error message purposes</param>
            <param name="timeoutMs">Timeout used - only for error message purposes</param>
            <param name="errorMessageContext">Context to add at the beginning of exception message</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._NarrowDownVisaTimeoutError(System.String)">
            <summary>
            This method when called after VisaTimeoutException() can narrow down the error to more specific exception
            e.g. InstrumentStatusException()
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._NarrowDownOpcToutError(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            This method when called after Ivi.Driver.MaxTimeExceededException can narrow down the error to more specific exception
            e.g. InstrumentStatusException()
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._SetEseMask(InstrumentDrivers.Internal.VisaSession.EventStatusRegister)">
            <summary>
            Sending *ESE command with mask parameter
            </summary>
            <param name="mask">Event Status Register mask</param>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._SetSreMask(RohdeSchwarz.RsInstrument.StatusByte)">
            <summary>
            Sending *SRE command with StatusByte mask parameter
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._WriteAndWaitForSrq(System.String,System.Boolean,System.Int32)">
            <summary>
            Internal method for OPC wait with ServiceRequest
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._WriteAndWaitForOpc(System.String,System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Internal method to synchronise a command with OPC. Returns last Status Byte value
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._WriteAndQueryOpc(System.String,System.Int32)">
            <summary>
            Writes a command and queries an *OPC? afterwards.
            Can not be used for queries.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._ReadBinaryData(System.Boolean,System.Boolean@)">
            <summary>
            Read binary data to byte array
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._ReadBinaryData(System.IO.Stream,System.Boolean)">
            <summary>
            Read binary data and returns it in the entered Stream.
            Returns true, if the data was binary data block.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.Clear">
            <summary>
            Perform VISA.viClear conditionally based on the instrument settings
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.Write(System.Byte[])">
            <summary>
            Writes byte buffer to the instrument
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.Write(System.String)">
            <summary>
            Writes string command to the instrument.
            If the session is non-VXI11, the command is appended by the TermChar if necessary
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.WriteWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Internal method to synchronise a command with OPC
            </summary>
        </member>
        <member name="F:InstrumentDrivers.Internal.VisaSession._userSrqHandlers">
            <summary>
            External Service Request handlers dictionary.
            Only one handler can be installed per Stb mask
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.InstallUserSrqHandler(System.EventHandler{RohdeSchwarz.RsInstrument.InstrEventArgs},RohdeSchwarz.RsInstrument.StatusByte,System.Boolean)">
            <summary>
            Adds user-defined Service request handler, called when any of the stbMask bits is set in the actual STB register.
            Optionally, it enables SRQ events
            Sets *SRE register mask to allow for the registered events to be invoked
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.UninstallUserSrqHandler(RohdeSchwarz.RsInstrument.StatusByte,System.Boolean)">
            <summary>
            Removes user Service request handler if previously registered.
            Optionally, it disables SRQ events
            Sets new *SRE register mask based on the remaining handlers
            Returns the SRE register mask
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession._AfterOpcEvent(RohdeSchwarz.RsInstrument.InstrEventArgs,System.Object)">
            <summary>
            Common handler for all the Write/Query with OPC event
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.WriteWithOpcEvent(System.String)">
            <summary>
            Writes with OPC, but does not wait for the opc from the instrument.
            Instead, it invokes the registered handler (property EventsHandler) when the OPC arrives.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryStringWithOpcEvent(System.String)">
            <summary>
            Query with OPC synchronization, but does not wait for the response from the instrument.
            Instead, it invokes the registered handler (property EventsHandler) when the response arrives.
            You can read the response in the event argument ResponseString.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryBinDataWithOpcEvent(System.String,System.Boolean)">
            <summary>
            Query with OPC synchronization, but does not wait for the response from the instrument.
            Instead, it invokes the registered handler (property EventsHandler) when the response arrives.
            You can read the binary response in the event argument Data.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.WriteWithWai(System.String)">
            <summary>
            Writes command with *WAI synchronization.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryAndClearEsr">
            <summary>
            Sends "*ESR? query to reset the clear-on-read bits of the Event Status Register
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryShort(System.String)">
            <summary>
            Method for querying short responses of maximum 64 bytes. The responses is TermChar-trimmed.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryStringUnknownLength(System.String)">
            <summary>
            Combines Write + ReadStringUnknownLength()
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryStringNoToutError(System.String,System.Nullable{System.Int32})">
            <summary>
            Queries string of unknown length, and supresses any timeout exceptions.
            If the VISA read ends with timeout, response is null
            You can set the VISA timeout locally just for this one call
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryStringWithOpc(System.String,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization. The response length is unlimited.
            If timeoutMs is set to -1, it is taken from the current OPCtimeout value.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryOpc">
            <summary>
            Sends *OPC? query and reads the result
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryOpc(System.Int32)">
            <summary>
            Sends *OPC? query and reads the result. The VISA timeout is defined only for this call
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.ClearBeforeRead">
            <summary>
            Clears IO buffers and the ESR register before reading/writing responses synchronized with *OPC;
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QuerySystemError">
            <summary>
            Returns one response to the SYSTEM:ERROR? query
            If 0,"No error is returned, the return string is null
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QuerySystemErrorAll">
            <summary>
            Returns all errors in the instrument's error queue
            Used query: "SYSTEM:ERROR?"
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.WriteBinaryData(System.String,System.IO.Stream)">
            <summary>
            Writes all the stream data as binary data to the instrument
            It sends the entered command, followed by the constructed binary data header
            and the binary data from the stream.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.ReadBinaryData(System.Boolean,System.Boolean@)">
            <summary>
            Reads binary data to byte array
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryBinaryData(System.String,System.Boolean,System.Boolean@)">
            <summary>
            Queries binary data to byte array
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryBinaryData(System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Queries binary data and returns it in the entered Stream.
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.QueryBinaryDataWithOpc(System.String,System.Boolean,System.Boolean@,System.Nullable{System.Int32})">
            <summary>
            Query with OPC synchronization. If timeoutMs is set to -1, it is taken from the current OPC Timeout value
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.ErrorQueueIsNotEmpty">
            <summary>
            Returns true, if error queue contains at least one error
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.GoToLocal">
            <summary>
            Tell the instrument to go to local
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSession.GoToRemote">
            <summary>
            Tell the instrument to go to remote
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSession.HasErrHandlerInstalled">
            <summary>
            Returns true, if at least one SRQ error handler is installed
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaPlugin">
            <summary>
            Defines Visa Plugin
            </summary>
        </member>
        <member name="T:InstrumentDrivers.Internal.VisaSessionHandle">
            <summary>
            Handle for VISA communication
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSessionHandle.ResourceName">
            <summary>
            Full Resource name including plugins
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSessionHandle.VisaResourceName">
            <summary>
            Resource name stripped of the round brackets part
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSessionHandle.ValidRm">
            <summary>
            Returns true, if the Resource manager is valid
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSessionHandle.ValidConnection">
            <summary>
            Returns true, if the Handle is valid (connected)
            </summary>
        </member>
        <member name="P:InstrumentDrivers.Internal.VisaSessionHandle.HasDefaultPlugin">
            <summary>
            Returns true, if the VISA plugin is default
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSessionHandle.#ctor(System.String,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Private constructor with all the parameters
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSessionHandle.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Standard Session Handle
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSessionHandle.#ctor(System.Byte[])">
            <summary>
            Session Handle from serialized data
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSessionHandle.Serialize">
            <summary>
            Encodes the current VISA session parameters into a byte array
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSessionHandle._Deserialize(System.Byte[])">
            <summary>
            Decodes entered byte array and returns the VISA session parameters
            The input resourceName is only used for exceptions
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSessionHandle.ParseResourceNamePlugin(System.String)">
            <summary>
            Parses input resourceName and returns: plugin string if present in the resourceName, else null
            Sets the VisaResourceName if the plugin was stripped
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSessionHandle.ConvertFromString(System.String)">
            <summary>
            Converts input string to VisaPlugin enum
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSessionHandle._ResolveDirectAndRnPlugin(System.String,System.String)">
            <summary>
            Returns resolved plugin, direct plugin has priority
            </summary>
        </member>
        <member name="M:InstrumentDrivers.Internal.VisaSessionHandle.InvalidateHandles">
            <summary>
            Sets RmHandle and Handle to 0
            </summary>
        </member>
    </members>
</doc>
